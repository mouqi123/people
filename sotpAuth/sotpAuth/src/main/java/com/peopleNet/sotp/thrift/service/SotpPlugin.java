/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.peopleNet.sotp.thrift.service;

import java.util.*;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-24")
public class SotpPlugin implements org.apache.thrift.TBase<SotpPlugin, SotpPlugin._Fields>, java.io.Serializable,
        Cloneable, Comparable<SotpPlugin> {
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
	        "SotpPlugin");
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "status", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "type", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "version", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "seed", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "plugin", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "file", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;
	private static final int __TYPE_ISSET_ID = 1;

	static {
		schemes.put(StandardScheme.class, new SotpPluginStandardSchemeFactory());
		schemes.put(TupleScheme.class, new SotpPluginTupleSchemeFactory());
	}

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
		        _Fields.class);
		tmpMap.put(_Fields.STATUS,
		        new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TYPE,
		        new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.VERSION,
		        new org.apache.thrift.meta_data.FieldMetaData("version",
		                org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEED,
		        new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PLUGIN,
		        new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE,
		        new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SotpPlugin.class, metaDataMap);
	}

	public int status; // required
	public int type; // required
	public String version; // required
	public String seed; // required
	public String plugin; // required
	public String file; // required
	private byte __isset_bitfield = 0;

	public SotpPlugin() {
	}

	public SotpPlugin(int status, int type, String version, String seed, String plugin, String file) {
		this();
		this.status = status;
		setStatusIsSet(true);
		this.type = type;
		setTypeIsSet(true);
		this.version = version;
		this.seed = seed;
		this.plugin = plugin;
		this.file = file;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public SotpPlugin(SotpPlugin other) {
		__isset_bitfield = other.__isset_bitfield;
		this.status = other.status;
		this.type = other.type;
		if (other.isSetVersion()) {
			this.version = other.version;
		}
		if (other.isSetSeed()) {
			this.seed = other.seed;
		}
		if (other.isSetPlugin()) {
			this.plugin = other.plugin;
		}
		if (other.isSetFile()) {
			this.file = other.file;
		}
	}

	public SotpPlugin deepCopy() {
		return new SotpPlugin(this);
	}

	@Override
	public void clear() {
		setStatusIsSet(false);
		this.status = 0;
		setTypeIsSet(false);
		this.type = 0;
		this.version = null;
		this.seed = null;
		this.plugin = null;
		this.file = null;
	}

	public int getStatus() {
		return this.status;
	}

	public SotpPlugin setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public int getType() {
		return this.type;
	}

	public SotpPlugin setType(int type) {
		this.type = type;
		setTypeIsSet(true);
		return this;
	}

	public void unsetType() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
	}

	/**
	 * Returns true if field type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
	}

	public void setTypeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
	}

	public String getVersion() {
		return this.version;
	}

	public SotpPlugin setVersion(String version) {
		this.version = version;
		return this;
	}

	public void unsetVersion() {
		this.version = null;
	}

	/**
	 * Returns true if field version is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetVersion() {
		return this.version != null;
	}

	public void setVersionIsSet(boolean value) {
		if (!value) {
			this.version = null;
		}
	}

	public String getSeed() {
		return this.seed;
	}

	public SotpPlugin setSeed(String seed) {
		this.seed = seed;
		return this;
	}

	public void unsetSeed() {
		this.seed = null;
	}

	/**
	 * Returns true if field seed is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSeed() {
		return this.seed != null;
	}

	public void setSeedIsSet(boolean value) {
		if (!value) {
			this.seed = null;
		}
	}

	public String getPlugin() {
		return this.plugin;
	}

	public SotpPlugin setPlugin(String plugin) {
		this.plugin = plugin;
		return this;
	}

	public void unsetPlugin() {
		this.plugin = null;
	}

	/**
	 * Returns true if field plugin is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPlugin() {
		return this.plugin != null;
	}

	public void setPluginIsSet(boolean value) {
		if (!value) {
			this.plugin = null;
		}
	}

	public String getFile() {
		return this.file;
	}

	public SotpPlugin setFile(String file) {
		this.file = file;
		return this;
	}

	public void unsetFile() {
		this.file = null;
	}

	/**
	 * Returns true if field file is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFile() {
		return this.file != null;
	}

	public void setFileIsSet(boolean value) {
		if (!value) {
			this.file = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((Integer) value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((Integer) value);
			}
			break;

		case VERSION:
			if (value == null) {
				unsetVersion();
			} else {
				setVersion((String) value);
			}
			break;

		case SEED:
			if (value == null) {
				unsetSeed();
			} else {
				setSeed((String) value);
			}
			break;

		case PLUGIN:
			if (value == null) {
				unsetPlugin();
			} else {
				setPlugin((String) value);
			}
			break;

		case FILE:
			if (value == null) {
				unsetFile();
			} else {
				setFile((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case STATUS:
			return getStatus();

		case TYPE:
			return getType();

		case VERSION:
			return getVersion();

		case SEED:
			return getSeed();

		case PLUGIN:
			return getPlugin();

		case FILE:
			return getFile();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case STATUS:
			return isSetStatus();
		case TYPE:
			return isSetType();
		case VERSION:
			return isSetVersion();
		case SEED:
			return isSetSeed();
		case PLUGIN:
			return isSetPlugin();
		case FILE:
			return isSetFile();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof SotpPlugin)
			return this.equals((SotpPlugin) that);
		return false;
	}

	public boolean equals(SotpPlugin that) {
		if (that == null)
			return false;

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_type = true;
		boolean that_present_type = true;
		if (this_present_type || that_present_type) {
			if (!(this_present_type && that_present_type))
				return false;
			if (this.type != that.type)
				return false;
		}

		boolean this_present_version = true && this.isSetVersion();
		boolean that_present_version = true && that.isSetVersion();
		if (this_present_version || that_present_version) {
			if (!(this_present_version && that_present_version))
				return false;
			if (!this.version.equals(that.version))
				return false;
		}

		boolean this_present_seed = true && this.isSetSeed();
		boolean that_present_seed = true && that.isSetSeed();
		if (this_present_seed || that_present_seed) {
			if (!(this_present_seed && that_present_seed))
				return false;
			if (!this.seed.equals(that.seed))
				return false;
		}

		boolean this_present_plugin = true && this.isSetPlugin();
		boolean that_present_plugin = true && that.isSetPlugin();
		if (this_present_plugin || that_present_plugin) {
			if (!(this_present_plugin && that_present_plugin))
				return false;
			if (!this.plugin.equals(that.plugin))
				return false;
		}

		boolean this_present_file = true && this.isSetFile();
		boolean that_present_file = true && that.isSetFile();
		if (this_present_file || that_present_file) {
			if (!(this_present_file && that_present_file))
				return false;
			if (!this.file.equals(that.file))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_status = true;
		list.add(present_status);
		if (present_status)
			list.add(status);

		boolean present_type = true;
		list.add(present_type);
		if (present_type)
			list.add(type);

		boolean present_version = true && (isSetVersion());
		list.add(present_version);
		if (present_version)
			list.add(version);

		boolean present_seed = true && (isSetSeed());
		list.add(present_seed);
		if (present_seed)
			list.add(seed);

		boolean present_plugin = true && (isSetPlugin());
		list.add(present_plugin);
		if (present_plugin)
			list.add(plugin);

		boolean present_file = true && (isSetFile());
		list.add(present_file);
		if (present_file)
			list.add(file);

		return list.hashCode();
	}

	@Override
	public int compareTo(SotpPlugin other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVersion()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSeed()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPlugin()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SotpPlugin(");
		boolean first = true;

		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("type:");
		sb.append(this.type);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("version:");
		if (this.version == null) {
			sb.append("null");
		} else {
			sb.append(this.version);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("seed:");
		if (this.seed == null) {
			sb.append("null");
		} else {
			sb.append(this.seed);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("plugin:");
		if (this.plugin == null) {
			sb.append("null");
		} else {
			sb.append(this.plugin);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("file:");
		if (this.file == null) {
			sb.append("null");
		} else {
			sb.append(this.file);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
			        new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
			        new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		STATUS((short) 1, "status"), TYPE((short) 2, "type"), VERSION((short) 3, "version"), SEED((short) 4,
		        "seed"), PLUGIN((short) 5, "plugin"), FILE((short) 6, "file");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // STATUS
				return STATUS;
			case 2: // TYPE
				return TYPE;
			case 3: // VERSION
				return VERSION;
			case 4: // SEED
				return SEED;
			case 5: // PLUGIN
				return PLUGIN;
			case 6: // FILE
				return FILE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	private static class SotpPluginStandardSchemeFactory implements SchemeFactory {
		public SotpPluginStandardScheme getScheme() {
			return new SotpPluginStandardScheme();
		}
	}

	private static class SotpPluginStandardScheme extends StandardScheme<SotpPlugin> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, SotpPlugin struct)
		        throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.type = iprot.readI32();
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // VERSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.version = iprot.readString();
						struct.setVersionIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // SEED
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.seed = iprot.readString();
						struct.setSeedIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // PLUGIN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.plugin = iprot.readString();
						struct.setPluginIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // FILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.file = iprot.readString();
						struct.setFileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, SotpPlugin struct)
		        throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TYPE_FIELD_DESC);
			oprot.writeI32(struct.type);
			oprot.writeFieldEnd();
			if (struct.version != null) {
				oprot.writeFieldBegin(VERSION_FIELD_DESC);
				oprot.writeString(struct.version);
				oprot.writeFieldEnd();
			}
			if (struct.seed != null) {
				oprot.writeFieldBegin(SEED_FIELD_DESC);
				oprot.writeString(struct.seed);
				oprot.writeFieldEnd();
			}
			if (struct.plugin != null) {
				oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
				oprot.writeString(struct.plugin);
				oprot.writeFieldEnd();
			}
			if (struct.file != null) {
				oprot.writeFieldBegin(FILE_FIELD_DESC);
				oprot.writeString(struct.file);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class SotpPluginTupleSchemeFactory implements SchemeFactory {
		public SotpPluginTupleScheme getScheme() {
			return new SotpPluginTupleScheme();
		}
	}

	private static class SotpPluginTupleScheme extends TupleScheme<SotpPlugin> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, SotpPlugin struct)
		        throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetStatus()) {
				optionals.set(0);
			}
			if (struct.isSetType()) {
				optionals.set(1);
			}
			if (struct.isSetVersion()) {
				optionals.set(2);
			}
			if (struct.isSetSeed()) {
				optionals.set(3);
			}
			if (struct.isSetPlugin()) {
				optionals.set(4);
			}
			if (struct.isSetFile()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetType()) {
				oprot.writeI32(struct.type);
			}
			if (struct.isSetVersion()) {
				oprot.writeString(struct.version);
			}
			if (struct.isSetSeed()) {
				oprot.writeString(struct.seed);
			}
			if (struct.isSetPlugin()) {
				oprot.writeString(struct.plugin);
			}
			if (struct.isSetFile()) {
				oprot.writeString(struct.file);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, SotpPlugin struct)
		        throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(1)) {
				struct.type = iprot.readI32();
				struct.setTypeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.version = iprot.readString();
				struct.setVersionIsSet(true);
			}
			if (incoming.get(3)) {
				struct.seed = iprot.readString();
				struct.setSeedIsSet(true);
			}
			if (incoming.get(4)) {
				struct.plugin = iprot.readString();
				struct.setPluginIsSet(true);
			}
			if (incoming.get(5)) {
				struct.file = iprot.readString();
				struct.setFileIsSet(true);
			}
		}
	}

}
