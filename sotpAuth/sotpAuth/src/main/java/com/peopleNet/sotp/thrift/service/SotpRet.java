/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.peopleNet.sotp.thrift.service;

import java.util.*;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-24")
public class SotpRet implements org.apache.thrift.TBase<SotpRet, SotpRet._Fields>, java.io.Serializable, Cloneable,
        Comparable<SotpRet> {
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
	        "SotpRet");
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "status", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
	        "title", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	static {
		schemes.put(StandardScheme.class, new SotpRetStandardSchemeFactory());
		schemes.put(TupleScheme.class, new SotpRetTupleSchemeFactory());
	}

	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
		        _Fields.class);
		tmpMap.put(_Fields.STATUS,
		        new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TITLE,
		        new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT,
		                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SotpRet.class, metaDataMap);
	}

	public int status; // required
	public String title; // required
	private byte __isset_bitfield = 0;

	public SotpRet() {
	}

	public SotpRet(int status, String title) {
		this();
		this.status = status;
		setStatusIsSet(true);
		this.title = title;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public SotpRet(SotpRet other) {
		__isset_bitfield = other.__isset_bitfield;
		this.status = other.status;
		if (other.isSetTitle()) {
			this.title = other.title;
		}
	}

	public SotpRet deepCopy() {
		return new SotpRet(this);
	}

	@Override
	public void clear() {
		setStatusIsSet(false);
		this.status = 0;
		this.title = null;
	}

	public int getStatus() {
		return this.status;
	}

	public SotpRet setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public String getTitle() {
		return this.title;
	}

	public SotpRet setTitle(String title) {
		this.title = title;
		return this;
	}

	public void unsetTitle() {
		this.title = null;
	}

	/**
	 * Returns true if field title is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTitle() {
		return this.title != null;
	}

	public void setTitleIsSet(boolean value) {
		if (!value) {
			this.title = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((Integer) value);
			}
			break;

		case TITLE:
			if (value == null) {
				unsetTitle();
			} else {
				setTitle((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case STATUS:
			return getStatus();

		case TITLE:
			return getTitle();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case STATUS:
			return isSetStatus();
		case TITLE:
			return isSetTitle();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof SotpRet)
			return this.equals((SotpRet) that);
		return false;
	}

	public boolean equals(SotpRet that) {
		if (that == null)
			return false;

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_title = true && this.isSetTitle();
		boolean that_present_title = true && that.isSetTitle();
		if (this_present_title || that_present_title) {
			if (!(this_present_title && that_present_title))
				return false;
			if (!this.title.equals(that.title))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_status = true;
		list.add(present_status);
		if (present_status)
			list.add(status);

		boolean present_title = true && (isSetTitle());
		list.add(present_title);
		if (present_title)
			list.add(title);

		return list.hashCode();
	}

	@Override
	public int compareTo(SotpRet other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SotpRet(");
		boolean first = true;

		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("title:");
		if (this.title == null) {
			sb.append("null");
		} else {
			sb.append(this.title);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
			        new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
			        new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		STATUS((short) 1, "status"), TITLE((short) 2, "title");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // STATUS
				return STATUS;
			case 2: // TITLE
				return TITLE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	private static class SotpRetStandardSchemeFactory implements SchemeFactory {
		public SotpRetStandardScheme getScheme() {
			return new SotpRetStandardScheme();
		}
	}

	private static class SotpRetStandardScheme extends StandardScheme<SotpRet> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, SotpRet struct)
		        throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.title = iprot.readString();
						struct.setTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, SotpRet struct)
		        throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.title != null) {
				oprot.writeFieldBegin(TITLE_FIELD_DESC);
				oprot.writeString(struct.title);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class SotpRetTupleSchemeFactory implements SchemeFactory {
		public SotpRetTupleScheme getScheme() {
			return new SotpRetTupleScheme();
		}
	}

	private static class SotpRetTupleScheme extends TupleScheme<SotpRet> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, SotpRet struct)
		        throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetStatus()) {
				optionals.set(0);
			}
			if (struct.isSetTitle()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetTitle()) {
				oprot.writeString(struct.title);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, SotpRet struct)
		        throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(1)) {
				struct.title = iprot.readString();
				struct.setTitleIsSet(true);
			}
		}
	}

}
