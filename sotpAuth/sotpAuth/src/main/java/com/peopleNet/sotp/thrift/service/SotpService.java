/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.peopleNet.sotp.thrift.service;

import java.util.*;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.peopleNet.sotp.log.LogUtil;
import com.peopleNet.sotp.util.CommonConfig;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-24")
public class SotpService {

	public interface Iface {

		public SotpPlugin sotpGen(int type, String merchant_sn, String hw) throws org.apache.thrift.TException;

		public SotpRet sotpEncrypt(String seed, String plain) throws org.apache.thrift.TException;

		public SotpRet sotpDecrypt(String seed, String cipher) throws org.apache.thrift.TException;

		public int sotpVerify(int type, String seed, int time, int window, String pin, String challenge,
		        String verifycode) throws org.apache.thrift.TException;

		public SotpRet merchant_getSDK(String merchant_sn, String version) throws org.apache.thrift.TException;

		public SotpPlugin merchant_sotpGen(int type, String merchant_sn, String merchant_seed, String appSign,
		        String hw) throws org.apache.thrift.TException;

		public SotpRet merchant_sotpEncrypt(String sn, String seed, String plain) throws org.apache.thrift.TException;

		public SotpRet merchant_sotpDecrypt(String sn, String seed, String cipher) throws org.apache.thrift.TException;

		public int merchant_sotpVerify(int type, String sn, String seed, int time, int window, String pin,
		        String challenge, String verifycode) throws org.apache.thrift.TException;

		public SotpRet shareKey(int type, String shareKey) throws org.apache.thrift.TException;

		public SotpRet transEncry(int type, String seed, String data) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void sotpGen(int type, String merchant_sn, String hw,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void sotpEncrypt(String seed, String plain, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		        throws org.apache.thrift.TException;

		public void sotpDecrypt(String seed, String cipher, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		        throws org.apache.thrift.TException;

		public void sotpVerify(int type, String seed, int time, int window, String pin, String challenge,
		        String verifycode, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		                throws org.apache.thrift.TException;

		public void merchant_getSDK(String merchant_sn, String version,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void merchant_sotpGen(int type, String merchant_sn, String merchant_seed, String appSign, String hw,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void merchant_sotpEncrypt(String sn, String seed, String plain,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void merchant_sotpDecrypt(String sn, String seed, String cipher,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void merchant_sotpVerify(int type, String sn, String seed, int time, int window, String pin,
		        String challenge, String verifycode, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		                throws org.apache.thrift.TException;

		public void shareKey(int type, String shareKey, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		        throws org.apache.thrift.TException;

		public void transEncry(int type, String seed, String data,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {

		private static LogUtil logger = LogUtil.getLogger(Client.class);

		private static int STATIC_SAVE_GENSOTP_RESULT = Integer
		        .parseInt(CommonConfig.get("STATIC_SAVE_GENSOTP_RESULT").trim());
		private static int WAIT_RESULT_MEMORY_SLEEP_MILLISECONDS = Integer
		        .parseInt(CommonConfig.get("WAIT_RESULT_MEMORY_SLEEP_MILLISECONDS").trim());
		private static int WAIT_RESULT_MEMORY_MAXTIMES = Integer
		        .parseInt(CommonConfig.get("WAIT_RESULT_MEMORY_MAXTIMES").trim());
		private static merchant_sotpGen_result pluginResult[] = new merchant_sotpGen_result[STATIC_SAVE_GENSOTP_RESULT];

		static {
			for (int i = 0; i < STATIC_SAVE_GENSOTP_RESULT; i++) {
				pluginResult[i] = new merchant_sotpGen_result();
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public SotpPlugin sotpGen(int type, String merchant_sn, String hw) throws org.apache.thrift.TException {
			send_sotpGen(type, merchant_sn, hw);
			return recv_sotpGen();
		}

		public void send_sotpGen(int type, String merchant_sn, String hw) throws org.apache.thrift.TException {
			sotpGen_args args = new sotpGen_args();
			args.setType(type);
			args.setMerchant_sn(merchant_sn);
			args.setHw(hw);
			sendBase("sotpGen", args);
		}

		public SotpPlugin recv_sotpGen() throws org.apache.thrift.TException {
			sotpGen_result result = new sotpGen_result();
			receiveBase(result, "sotpGen");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "sotpGen failed: unknown result");
		}

		public SotpRet sotpEncrypt(String seed, String plain) throws org.apache.thrift.TException {
			send_sotpEncrypt(seed, plain);
			return recv_sotpEncrypt();
		}

		public void send_sotpEncrypt(String seed, String plain) throws org.apache.thrift.TException {
			sotpEncrypt_args args = new sotpEncrypt_args();
			args.setSeed(seed);
			args.setPlain(plain);
			sendBase("sotpEncrypt", args);
		}

		public SotpRet recv_sotpEncrypt() throws org.apache.thrift.TException {
			sotpEncrypt_result result = new sotpEncrypt_result();
			receiveBase(result, "sotpEncrypt");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "sotpEncrypt failed: unknown result");
		}

		public SotpRet sotpDecrypt(String seed, String cipher) throws org.apache.thrift.TException {
			send_sotpDecrypt(seed, cipher);
			return recv_sotpDecrypt();
		}

		public void send_sotpDecrypt(String seed, String cipher) throws org.apache.thrift.TException {
			sotpDecrypt_args args = new sotpDecrypt_args();
			args.setSeed(seed);
			args.setCipher(cipher);
			sendBase("sotpDecrypt", args);
		}

		public SotpRet recv_sotpDecrypt() throws org.apache.thrift.TException {
			sotpDecrypt_result result = new sotpDecrypt_result();
			receiveBase(result, "sotpDecrypt");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "sotpDecrypt failed: unknown result");
		}

		public int sotpVerify(int type, String seed, int time, int window, String pin, String challenge,
		        String verifycode) throws org.apache.thrift.TException {
			send_sotpVerify(type, seed, time, window, pin, challenge, verifycode);
			return recv_sotpVerify();
		}

		public void send_sotpVerify(int type, String seed, int time, int window, String pin, String challenge,
		        String verifycode) throws org.apache.thrift.TException {
			sotpVerify_args args = new sotpVerify_args();
			args.setType(type);
			args.setSeed(seed);
			args.setTime(time);
			args.setWindow(window);
			args.setPin(pin);
			args.setChallenge(challenge);
			args.setVerifycode(verifycode);
			sendBase("sotpVerify", args);
		}

		public int recv_sotpVerify() throws org.apache.thrift.TException {
			sotpVerify_result result = new sotpVerify_result();
			receiveBase(result, "sotpVerify");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "sotpVerify failed: unknown result");
		}

		public SotpRet merchant_getSDK(String merchant_sn, String version) throws org.apache.thrift.TException {
			send_merchant_getSDK(merchant_sn, version);
			return recv_merchant_getSDK();
		}

		public void send_merchant_getSDK(String merchant_sn, String version) throws org.apache.thrift.TException {
			merchant_getSDK_args args = new merchant_getSDK_args();
			args.setMerchant_sn(merchant_sn);
			args.setVersion(version);
			sendBase("merchant_getSDK", args);
		}

		public SotpRet recv_merchant_getSDK() throws org.apache.thrift.TException {
			merchant_getSDK_result result = new merchant_getSDK_result();
			receiveBase(result, "merchant_getSDK");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "merchant_getSDK failed: unknown result");
		}

		public SotpPlugin merchant_sotpGen(int type, String merchant_sn, String merchant_seed, String appSign,
		        String hw) throws org.apache.thrift.TException {
			send_merchant_sotpGen(type, merchant_sn, merchant_seed, appSign, hw);
			return recv_merchant_sotpGen();
		}

		public void send_merchant_sotpGen(int type, String merchant_sn, String merchant_seed, String appSign, String hw)
		        throws org.apache.thrift.TException {
			merchant_sotpGen_args args = new merchant_sotpGen_args();
			args.setType(type);
			args.setMerchant_sn(merchant_sn);
			args.setMerchant_seed(merchant_seed);
			args.setAppSign(appSign);
			args.setHw(hw);
			sendBase("merchant_sotpGen", args);
		}

		public SotpPlugin recv_merchant_sotpGen() throws org.apache.thrift.TException {
			int waitTime = 0;
			while (true) {
				if (waitTime >= WAIT_RESULT_MEMORY_MAXTIMES) {
					throw new org.apache.thrift.TApplicationException(
					        org.apache.thrift.TApplicationException.MISSING_RESULT,
					        "genSotp failed: cannot get static genResult memory!");
				}
				if (PluginSaveHelper.getAvailable()) {
					break;
				}
				try {
					waitTime++;
					Thread.sleep(WAIT_RESULT_MEMORY_SLEEP_MILLISECONDS);
				} catch (InterruptedException e) {
					throw new org.apache.thrift.TApplicationException(
					        org.apache.thrift.TApplicationException.MISSING_RESULT,
					        "genSotp failed: thread.sleep error!");
				}
			}
			logger.debug("get available pluginResult in recv_genSotp function");
			long threadId = Thread.currentThread().getId();
			int resultIndex = (int) (threadId % STATIC_SAVE_GENSOTP_RESULT);
			merchant_sotpGen_result result = pluginResult[resultIndex];
			receiveBase(result, "merchant_sotpGen");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "merchant_sotpGen failed: unknown result");
		}

		public SotpRet merchant_sotpEncrypt(String sn, String seed, String plain) throws org.apache.thrift.TException {
			send_merchant_sotpEncrypt(sn, seed, plain);
			return recv_merchant_sotpEncrypt();
		}

		public void send_merchant_sotpEncrypt(String sn, String seed, String plain)
		        throws org.apache.thrift.TException {
			merchant_sotpEncrypt_args args = new merchant_sotpEncrypt_args();
			args.setSn(sn);
			args.setSeed(seed);
			args.setPlain(plain);
			sendBase("merchant_sotpEncrypt", args);
		}

		public SotpRet recv_merchant_sotpEncrypt() throws org.apache.thrift.TException {
			merchant_sotpEncrypt_result result = new merchant_sotpEncrypt_result();
			receiveBase(result, "merchant_sotpEncrypt");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "merchant_sotpEncrypt failed: unknown result");
		}

		public SotpRet merchant_sotpDecrypt(String sn, String seed, String cipher) throws org.apache.thrift.TException {
			send_merchant_sotpDecrypt(sn, seed, cipher);
			return recv_merchant_sotpDecrypt();
		}

		public void send_merchant_sotpDecrypt(String sn, String seed, String cipher)
		        throws org.apache.thrift.TException {
			merchant_sotpDecrypt_args args = new merchant_sotpDecrypt_args();
			args.setSn(sn);
			args.setSeed(seed);
			args.setCipher(cipher);
			sendBase("merchant_sotpDecrypt", args);
		}

		public SotpRet recv_merchant_sotpDecrypt() throws org.apache.thrift.TException {
			merchant_sotpDecrypt_result result = new merchant_sotpDecrypt_result();
			receiveBase(result, "merchant_sotpDecrypt");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "merchant_sotpDecrypt failed: unknown result");
		}

		public int merchant_sotpVerify(int type, String sn, String seed, int time, int window, String pin,
		        String challenge, String verifycode) throws org.apache.thrift.TException {
			send_merchant_sotpVerify(type, sn, seed, time, window, pin, challenge, verifycode);
			return recv_merchant_sotpVerify();
		}

		public void send_merchant_sotpVerify(int type, String sn, String seed, int time, int window, String pin,
		        String challenge, String verifycode) throws org.apache.thrift.TException {
			merchant_sotpVerify_args args = new merchant_sotpVerify_args();
			args.setType(type);
			args.setSn(sn);
			args.setSeed(seed);
			args.setTime(time);
			args.setWindow(window);
			args.setPin(pin);
			args.setChallenge(challenge);
			args.setVerifycode(verifycode);
			sendBase("merchant_sotpVerify", args);
		}

		public int recv_merchant_sotpVerify() throws org.apache.thrift.TException {
			merchant_sotpVerify_result result = new merchant_sotpVerify_result();
			receiveBase(result, "merchant_sotpVerify");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "merchant_sotpVerify failed: unknown result");
		}

		public SotpRet shareKey(int type, String shareKey) throws org.apache.thrift.TException {
			send_shareKey(type, shareKey);
			return recv_shareKey();
		}

		public void send_shareKey(int type, String shareKey) throws org.apache.thrift.TException {
			shareKey_args args = new shareKey_args();
			args.setType(type);
			args.setShareKey(shareKey);
			sendBase("shareKey", args);
		}

		public SotpRet recv_shareKey() throws org.apache.thrift.TException {
			shareKey_result result = new shareKey_result();
			receiveBase(result, "shareKey");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "shareKey failed: unknown result");
		}

		public SotpRet transEncry(int type, String seed, String data) throws org.apache.thrift.TException {
			send_transEncry(type, seed, data);
			return recv_transEncry();
		}

		public void send_transEncry(int type, String seed, String data) throws org.apache.thrift.TException {
			transEncry_args args = new transEncry_args();
			args.setType(type);
			args.setSeed(seed);
			args.setData(data);
			sendBase("transEncry", args);
		}

		public SotpRet recv_transEncry() throws org.apache.thrift.TException {
			transEncry_result result = new transEncry_result();
			receiveBase(result, "transEncry");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
			        "transEncry failed: unknown result");
		}

		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
			        org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
		        org.apache.thrift.async.TAsyncClientManager clientManager,
		        org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void sotpGen(int type, String merchant_sn, String hw,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			sotpGen_call method_call = new sotpGen_call(type, merchant_sn, hw, resultHandler, this, ___protocolFactory,
			        ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void sotpEncrypt(String seed, String plain, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		        throws org.apache.thrift.TException {
			checkReady();
			sotpEncrypt_call method_call = new sotpEncrypt_call(seed, plain, resultHandler, this, ___protocolFactory,
			        ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void sotpDecrypt(String seed, String cipher, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		        throws org.apache.thrift.TException {
			checkReady();
			sotpDecrypt_call method_call = new sotpDecrypt_call(seed, cipher, resultHandler, this, ___protocolFactory,
			        ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void sotpVerify(int type, String seed, int time, int window, String pin, String challenge,
		        String verifycode, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		                throws org.apache.thrift.TException {
			checkReady();
			sotpVerify_call method_call = new sotpVerify_call(type, seed, time, window, pin, challenge, verifycode,
			        resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void merchant_getSDK(String merchant_sn, String version,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			merchant_getSDK_call method_call = new merchant_getSDK_call(merchant_sn, version, resultHandler, this,
			        ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void merchant_sotpGen(int type, String merchant_sn, String merchant_seed, String appSign, String hw,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			merchant_sotpGen_call method_call = new merchant_sotpGen_call(type, merchant_sn, merchant_seed, appSign, hw,
			        resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void merchant_sotpEncrypt(String sn, String seed, String plain,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			merchant_sotpEncrypt_call method_call = new merchant_sotpEncrypt_call(sn, seed, plain, resultHandler, this,
			        ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void merchant_sotpDecrypt(String sn, String seed, String cipher,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			merchant_sotpDecrypt_call method_call = new merchant_sotpDecrypt_call(sn, seed, cipher, resultHandler, this,
			        ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void merchant_sotpVerify(int type, String sn, String seed, int time, int window, String pin,
		        String challenge, String verifycode, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		                throws org.apache.thrift.TException {
			checkReady();
			merchant_sotpVerify_call method_call = new merchant_sotpVerify_call(type, sn, seed, time, window, pin,
			        challenge, verifycode, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void shareKey(int type, String shareKey, org.apache.thrift.async.AsyncMethodCallback resultHandler)
		        throws org.apache.thrift.TException {
			checkReady();
			shareKey_call method_call = new shareKey_call(type, shareKey, resultHandler, this, ___protocolFactory,
			        ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public void transEncry(int type, String seed, String data,
		        org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			transEncry_call method_call = new transEncry_call(type, seed, data, resultHandler, this, ___protocolFactory,
			        ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public static class sotpGen_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int type;
			private String merchant_sn;
			private String hw;

			public sotpGen_call(int type, String merchant_sn, String hw,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.type = type;
				this.merchant_sn = merchant_sn;
				this.hw = hw;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sotpGen",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				sotpGen_args args = new sotpGen_args();
				args.setType(type);
				args.setMerchant_sn(merchant_sn);
				args.setHw(hw);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpPlugin getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_sotpGen();
			}
		}

		public static class sotpEncrypt_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String seed;
			private String plain;

			public sotpEncrypt_call(String seed, String plain,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.seed = seed;
				this.plain = plain;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sotpEncrypt",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				sotpEncrypt_args args = new sotpEncrypt_args();
				args.setSeed(seed);
				args.setPlain(plain);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_sotpEncrypt();
			}
		}

		public static class sotpDecrypt_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String seed;
			private String cipher;

			public sotpDecrypt_call(String seed, String cipher,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.seed = seed;
				this.cipher = cipher;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sotpDecrypt",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				sotpDecrypt_args args = new sotpDecrypt_args();
				args.setSeed(seed);
				args.setCipher(cipher);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_sotpDecrypt();
			}
		}

		public static class sotpVerify_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int type;
			private String seed;
			private int time;
			private int window;
			private String pin;
			private String challenge;
			private String verifycode;

			public sotpVerify_call(int type, String seed, int time, int window, String pin, String challenge,
			        String verifycode, org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.type = type;
				this.seed = seed;
				this.time = time;
				this.window = window;
				this.pin = pin;
				this.challenge = challenge;
				this.verifycode = verifycode;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sotpVerify",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				sotpVerify_args args = new sotpVerify_args();
				args.setType(type);
				args.setSeed(seed);
				args.setTime(time);
				args.setWindow(window);
				args.setPin(pin);
				args.setChallenge(challenge);
				args.setVerifycode(verifycode);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_sotpVerify();
			}
		}

		public static class merchant_getSDK_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String merchant_sn;
			private String version;

			public merchant_getSDK_call(String merchant_sn, String version,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.merchant_sn = merchant_sn;
				this.version = version;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchant_getSDK",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				merchant_getSDK_args args = new merchant_getSDK_args();
				args.setMerchant_sn(merchant_sn);
				args.setVersion(version);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_merchant_getSDK();
			}
		}

		public static class merchant_sotpGen_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int type;
			private String merchant_sn;
			private String merchant_seed;
			private String appSign;
			private String hw;

			public merchant_sotpGen_call(int type, String merchant_sn, String merchant_seed, String appSign, String hw,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.type = type;
				this.merchant_sn = merchant_sn;
				this.merchant_seed = merchant_seed;
				this.appSign = appSign;
				this.hw = hw;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchant_sotpGen",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				merchant_sotpGen_args args = new merchant_sotpGen_args();
				args.setType(type);
				args.setMerchant_sn(merchant_sn);
				args.setMerchant_seed(merchant_seed);
				args.setAppSign(appSign);
				args.setHw(hw);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpPlugin getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_merchant_sotpGen();
			}
		}

		public static class merchant_sotpEncrypt_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String sn;
			private String seed;
			private String plain;

			public merchant_sotpEncrypt_call(String sn, String seed, String plain,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sn = sn;
				this.seed = seed;
				this.plain = plain;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchant_sotpEncrypt",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				merchant_sotpEncrypt_args args = new merchant_sotpEncrypt_args();
				args.setSn(sn);
				args.setSeed(seed);
				args.setPlain(plain);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_merchant_sotpEncrypt();
			}
		}

		public static class merchant_sotpDecrypt_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String sn;
			private String seed;
			private String cipher;

			public merchant_sotpDecrypt_call(String sn, String seed, String cipher,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sn = sn;
				this.seed = seed;
				this.cipher = cipher;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchant_sotpDecrypt",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				merchant_sotpDecrypt_args args = new merchant_sotpDecrypt_args();
				args.setSn(sn);
				args.setSeed(seed);
				args.setCipher(cipher);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_merchant_sotpDecrypt();
			}
		}

		public static class merchant_sotpVerify_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int type;
			private String sn;
			private String seed;
			private int time;
			private int window;
			private String pin;
			private String challenge;
			private String verifycode;

			public merchant_sotpVerify_call(int type, String sn, String seed, int time, int window, String pin,
			        String challenge, String verifycode, org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.type = type;
				this.sn = sn;
				this.seed = seed;
				this.time = time;
				this.window = window;
				this.pin = pin;
				this.challenge = challenge;
				this.verifycode = verifycode;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchant_sotpVerify",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				merchant_sotpVerify_args args = new merchant_sotpVerify_args();
				args.setType(type);
				args.setSn(sn);
				args.setSeed(seed);
				args.setTime(time);
				args.setWindow(window);
				args.setPin(pin);
				args.setChallenge(challenge);
				args.setVerifycode(verifycode);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_merchant_sotpVerify();
			}
		}

		public static class shareKey_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int type;
			private String shareKey;

			public shareKey_call(int type, String shareKey, org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.type = type;
				this.shareKey = shareKey;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shareKey",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				shareKey_args args = new shareKey_args();
				args.setType(type);
				args.setShareKey(shareKey);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_shareKey();
			}
		}

		public static class transEncry_call extends org.apache.thrift.async.TAsyncMethodCall {
			private int type;
			private String seed;
			private String data;

			public transEncry_call(int type, String seed, String data,
			        org.apache.thrift.async.AsyncMethodCallback resultHandler,
			        org.apache.thrift.async.TAsyncClient client,
			        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
			        org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.type = type;
				this.seed = seed;
				this.data = data;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transEncry",
				        org.apache.thrift.protocol.TMessageType.CALL, 0));
				transEncry_args args = new transEncry_args();
				args.setType(type);
				args.setSeed(seed);
				args.setData(data);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public SotpRet getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
				        getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_transEncry();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
	        implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
			        new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
		        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
		        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("sotpGen", new sotpGen());
			processMap.put("sotpEncrypt", new sotpEncrypt());
			processMap.put("sotpDecrypt", new sotpDecrypt());
			processMap.put("sotpVerify", new sotpVerify());
			processMap.put("merchant_getSDK", new merchant_getSDK());
			processMap.put("merchant_sotpGen", new merchant_sotpGen());
			processMap.put("merchant_sotpEncrypt", new merchant_sotpEncrypt());
			processMap.put("merchant_sotpDecrypt", new merchant_sotpDecrypt());
			processMap.put("merchant_sotpVerify", new merchant_sotpVerify());
			processMap.put("shareKey", new shareKey());
			processMap.put("transEncry", new transEncry());
			return processMap;
		}

		public static class sotpGen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sotpGen_args> {
			public sotpGen() {
				super("sotpGen");
			}

			public sotpGen_args getEmptyArgsInstance() {
				return new sotpGen_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public sotpGen_result getResult(I iface, sotpGen_args args) throws org.apache.thrift.TException {
				sotpGen_result result = new sotpGen_result();
				result.success = iface.sotpGen(args.type, args.merchant_sn, args.hw);
				return result;
			}
		}

		public static class sotpEncrypt<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, sotpEncrypt_args> {
			public sotpEncrypt() {
				super("sotpEncrypt");
			}

			public sotpEncrypt_args getEmptyArgsInstance() {
				return new sotpEncrypt_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public sotpEncrypt_result getResult(I iface, sotpEncrypt_args args) throws org.apache.thrift.TException {
				sotpEncrypt_result result = new sotpEncrypt_result();
				result.success = iface.sotpEncrypt(args.seed, args.plain);
				return result;
			}
		}

		public static class sotpDecrypt<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, sotpDecrypt_args> {
			public sotpDecrypt() {
				super("sotpDecrypt");
			}

			public sotpDecrypt_args getEmptyArgsInstance() {
				return new sotpDecrypt_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public sotpDecrypt_result getResult(I iface, sotpDecrypt_args args) throws org.apache.thrift.TException {
				sotpDecrypt_result result = new sotpDecrypt_result();
				result.success = iface.sotpDecrypt(args.seed, args.cipher);
				return result;
			}
		}

		public static class sotpVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sotpVerify_args> {
			public sotpVerify() {
				super("sotpVerify");
			}

			public sotpVerify_args getEmptyArgsInstance() {
				return new sotpVerify_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public sotpVerify_result getResult(I iface, sotpVerify_args args) throws org.apache.thrift.TException {
				sotpVerify_result result = new sotpVerify_result();
				result.success = iface.sotpVerify(args.type, args.seed, args.time, args.window, args.pin,
				        args.challenge, args.verifycode);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class merchant_getSDK<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, merchant_getSDK_args> {
			public merchant_getSDK() {
				super("merchant_getSDK");
			}

			public merchant_getSDK_args getEmptyArgsInstance() {
				return new merchant_getSDK_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public merchant_getSDK_result getResult(I iface, merchant_getSDK_args args)
			        throws org.apache.thrift.TException {
				merchant_getSDK_result result = new merchant_getSDK_result();
				result.success = iface.merchant_getSDK(args.merchant_sn, args.version);
				return result;
			}
		}

		public static class merchant_sotpGen<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, merchant_sotpGen_args> {
			public merchant_sotpGen() {
				super("merchant_sotpGen");
			}

			public merchant_sotpGen_args getEmptyArgsInstance() {
				return new merchant_sotpGen_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public merchant_sotpGen_result getResult(I iface, merchant_sotpGen_args args)
			        throws org.apache.thrift.TException {
				merchant_sotpGen_result result = new merchant_sotpGen_result();
				result.success = iface.merchant_sotpGen(args.type, args.merchant_sn, args.merchant_seed, args.appSign,
				        args.hw);
				return result;
			}
		}

		public static class merchant_sotpEncrypt<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, merchant_sotpEncrypt_args> {
			public merchant_sotpEncrypt() {
				super("merchant_sotpEncrypt");
			}

			public merchant_sotpEncrypt_args getEmptyArgsInstance() {
				return new merchant_sotpEncrypt_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public merchant_sotpEncrypt_result getResult(I iface, merchant_sotpEncrypt_args args)
			        throws org.apache.thrift.TException {
				merchant_sotpEncrypt_result result = new merchant_sotpEncrypt_result();
				result.success = iface.merchant_sotpEncrypt(args.sn, args.seed, args.plain);
				return result;
			}
		}

		public static class merchant_sotpDecrypt<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, merchant_sotpDecrypt_args> {
			public merchant_sotpDecrypt() {
				super("merchant_sotpDecrypt");
			}

			public merchant_sotpDecrypt_args getEmptyArgsInstance() {
				return new merchant_sotpDecrypt_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public merchant_sotpDecrypt_result getResult(I iface, merchant_sotpDecrypt_args args)
			        throws org.apache.thrift.TException {
				merchant_sotpDecrypt_result result = new merchant_sotpDecrypt_result();
				result.success = iface.merchant_sotpDecrypt(args.sn, args.seed, args.cipher);
				return result;
			}
		}

		public static class merchant_sotpVerify<I extends Iface>
		        extends org.apache.thrift.ProcessFunction<I, merchant_sotpVerify_args> {
			public merchant_sotpVerify() {
				super("merchant_sotpVerify");
			}

			public merchant_sotpVerify_args getEmptyArgsInstance() {
				return new merchant_sotpVerify_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public merchant_sotpVerify_result getResult(I iface, merchant_sotpVerify_args args)
			        throws org.apache.thrift.TException {
				merchant_sotpVerify_result result = new merchant_sotpVerify_result();
				result.success = iface.merchant_sotpVerify(args.type, args.sn, args.seed, args.time, args.window,
				        args.pin, args.challenge, args.verifycode);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class shareKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shareKey_args> {
			public shareKey() {
				super("shareKey");
			}

			public shareKey_args getEmptyArgsInstance() {
				return new shareKey_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public shareKey_result getResult(I iface, shareKey_args args) throws org.apache.thrift.TException {
				shareKey_result result = new shareKey_result();
				result.success = iface.shareKey(args.type, args.shareKey);
				return result;
			}
		}

		public static class transEncry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transEncry_args> {
			public transEncry() {
				super("transEncry");
			}

			public transEncry_args getEmptyArgsInstance() {
				return new transEncry_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public transEncry_result getResult(I iface, transEncry_args args) throws org.apache.thrift.TException {
				transEncry_result result = new transEncry_result();
				result.success = iface.transEncry(args.type, args.seed, args.data);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
			        new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
		        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
		        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("sotpGen", new sotpGen());
			processMap.put("sotpEncrypt", new sotpEncrypt());
			processMap.put("sotpDecrypt", new sotpDecrypt());
			processMap.put("sotpVerify", new sotpVerify());
			processMap.put("merchant_getSDK", new merchant_getSDK());
			processMap.put("merchant_sotpGen", new merchant_sotpGen());
			processMap.put("merchant_sotpEncrypt", new merchant_sotpEncrypt());
			processMap.put("merchant_sotpDecrypt", new merchant_sotpDecrypt());
			processMap.put("merchant_sotpVerify", new merchant_sotpVerify());
			processMap.put("shareKey", new shareKey());
			processMap.put("transEncry", new transEncry());
			return processMap;
		}

		public static class sotpGen<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, sotpGen_args, SotpPlugin> {
			public sotpGen() {
				super("sotpGen");
			}

			public sotpGen_args getEmptyArgsInstance() {
				return new sotpGen_args();
			}

			public AsyncMethodCallback<SotpPlugin> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpPlugin>() {
					public void onComplete(SotpPlugin o) {
						sotpGen_result result = new sotpGen_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						sotpGen_result result = new sotpGen_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, sotpGen_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpPlugin> resultHandler) throws TException {
				iface.sotpGen(args.type, args.merchant_sn, args.hw, resultHandler);
			}
		}

		public static class sotpEncrypt<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, sotpEncrypt_args, SotpRet> {
			public sotpEncrypt() {
				super("sotpEncrypt");
			}

			public sotpEncrypt_args getEmptyArgsInstance() {
				return new sotpEncrypt_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						sotpEncrypt_result result = new sotpEncrypt_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						sotpEncrypt_result result = new sotpEncrypt_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, sotpEncrypt_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.sotpEncrypt(args.seed, args.plain, resultHandler);
			}
		}

		public static class sotpDecrypt<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, sotpDecrypt_args, SotpRet> {
			public sotpDecrypt() {
				super("sotpDecrypt");
			}

			public sotpDecrypt_args getEmptyArgsInstance() {
				return new sotpDecrypt_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						sotpDecrypt_result result = new sotpDecrypt_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						sotpDecrypt_result result = new sotpDecrypt_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, sotpDecrypt_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.sotpDecrypt(args.seed, args.cipher, resultHandler);
			}
		}

		public static class sotpVerify<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, sotpVerify_args, Integer> {
			public sotpVerify() {
				super("sotpVerify");
			}

			public sotpVerify_args getEmptyArgsInstance() {
				return new sotpVerify_args();
			}

			public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Integer>() {
					public void onComplete(Integer o) {
						sotpVerify_result result = new sotpVerify_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						sotpVerify_result result = new sotpVerify_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, sotpVerify_args args,
			        org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
				iface.sotpVerify(args.type, args.seed, args.time, args.window, args.pin, args.challenge,
				        args.verifycode, resultHandler);
			}
		}

		public static class merchant_getSDK<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, merchant_getSDK_args, SotpRet> {
			public merchant_getSDK() {
				super("merchant_getSDK");
			}

			public merchant_getSDK_args getEmptyArgsInstance() {
				return new merchant_getSDK_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						merchant_getSDK_result result = new merchant_getSDK_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						merchant_getSDK_result result = new merchant_getSDK_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, merchant_getSDK_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.merchant_getSDK(args.merchant_sn, args.version, resultHandler);
			}
		}

		public static class merchant_sotpGen<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, merchant_sotpGen_args, SotpPlugin> {
			public merchant_sotpGen() {
				super("merchant_sotpGen");
			}

			public merchant_sotpGen_args getEmptyArgsInstance() {
				return new merchant_sotpGen_args();
			}

			public AsyncMethodCallback<SotpPlugin> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpPlugin>() {
					public void onComplete(SotpPlugin o) {
						merchant_sotpGen_result result = new merchant_sotpGen_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						merchant_sotpGen_result result = new merchant_sotpGen_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, merchant_sotpGen_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpPlugin> resultHandler) throws TException {
				iface.merchant_sotpGen(args.type, args.merchant_sn, args.merchant_seed, args.appSign, args.hw,
				        resultHandler);
			}
		}

		public static class merchant_sotpEncrypt<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, merchant_sotpEncrypt_args, SotpRet> {
			public merchant_sotpEncrypt() {
				super("merchant_sotpEncrypt");
			}

			public merchant_sotpEncrypt_args getEmptyArgsInstance() {
				return new merchant_sotpEncrypt_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						merchant_sotpEncrypt_result result = new merchant_sotpEncrypt_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						merchant_sotpEncrypt_result result = new merchant_sotpEncrypt_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, merchant_sotpEncrypt_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.merchant_sotpEncrypt(args.sn, args.seed, args.plain, resultHandler);
			}
		}

		public static class merchant_sotpDecrypt<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, merchant_sotpDecrypt_args, SotpRet> {
			public merchant_sotpDecrypt() {
				super("merchant_sotpDecrypt");
			}

			public merchant_sotpDecrypt_args getEmptyArgsInstance() {
				return new merchant_sotpDecrypt_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						merchant_sotpDecrypt_result result = new merchant_sotpDecrypt_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						merchant_sotpDecrypt_result result = new merchant_sotpDecrypt_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, merchant_sotpDecrypt_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.merchant_sotpDecrypt(args.sn, args.seed, args.cipher, resultHandler);
			}
		}

		public static class merchant_sotpVerify<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, merchant_sotpVerify_args, Integer> {
			public merchant_sotpVerify() {
				super("merchant_sotpVerify");
			}

			public merchant_sotpVerify_args getEmptyArgsInstance() {
				return new merchant_sotpVerify_args();
			}

			public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Integer>() {
					public void onComplete(Integer o) {
						merchant_sotpVerify_result result = new merchant_sotpVerify_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						merchant_sotpVerify_result result = new merchant_sotpVerify_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, merchant_sotpVerify_args args,
			        org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
				iface.merchant_sotpVerify(args.type, args.sn, args.seed, args.time, args.window, args.pin,
				        args.challenge, args.verifycode, resultHandler);
			}
		}

		public static class shareKey<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, shareKey_args, SotpRet> {
			public shareKey() {
				super("shareKey");
			}

			public shareKey_args getEmptyArgsInstance() {
				return new shareKey_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						shareKey_result result = new shareKey_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						shareKey_result result = new shareKey_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, shareKey_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.shareKey(args.type, args.shareKey, resultHandler);
			}
		}

		public static class transEncry<I extends AsyncIface>
		        extends org.apache.thrift.AsyncProcessFunction<I, transEncry_args, SotpRet> {
			public transEncry() {
				super("transEncry");
			}

			public transEncry_args getEmptyArgsInstance() {
				return new transEncry_args();
			}

			public AsyncMethodCallback<SotpRet> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<SotpRet>() {
					public void onComplete(SotpRet o) {
						transEncry_result result = new transEncry_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						transEncry_result result = new transEncry_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
				                    org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, transEncry_args args,
			        org.apache.thrift.async.AsyncMethodCallback<SotpRet> resultHandler) throws TException {
				iface.transEncry(args.type, args.seed, args.data, resultHandler);
			}
		}

	}

	public static class sotpGen_args implements org.apache.thrift.TBase<sotpGen_args, sotpGen_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<sotpGen_args> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpGen_args");
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "type", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField MERCHANT_SN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "merchant_sn", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField HW_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "hw", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __TYPE_ISSET_ID = 0;

		static {
			schemes.put(StandardScheme.class, new sotpGen_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpGen_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.TYPE,
			        new org.apache.thrift.meta_data.FieldMetaData("type",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.MERCHANT_SN, new org.apache.thrift.meta_data.FieldMetaData("merchant_sn",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.HW, new org.apache.thrift.meta_data.FieldMetaData("hw",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpGen_args.class, metaDataMap);
		}

		public int type; // required
		public String merchant_sn; // required
		public String hw; // required
		private byte __isset_bitfield = 0;

		public sotpGen_args() {
		}

		public sotpGen_args(int type, String merchant_sn, String hw) {
			this();
			this.type = type;
			setTypeIsSet(true);
			this.merchant_sn = merchant_sn;
			this.hw = hw;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpGen_args(sotpGen_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.type = other.type;
			if (other.isSetMerchant_sn()) {
				this.merchant_sn = other.merchant_sn;
			}
			if (other.isSetHw()) {
				this.hw = other.hw;
			}
		}

		public sotpGen_args deepCopy() {
			return new sotpGen_args(this);
		}

		@Override
		public void clear() {
			setTypeIsSet(false);
			this.type = 0;
			this.merchant_sn = null;
			this.hw = null;
		}

		public int getType() {
			return this.type;
		}

		public sotpGen_args setType(int type) {
			this.type = type;
			setTypeIsSet(true);
			return this;
		}

		public void unsetType() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		public void setTypeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
		}

		public String getMerchant_sn() {
			return this.merchant_sn;
		}

		public sotpGen_args setMerchant_sn(String merchant_sn) {
			this.merchant_sn = merchant_sn;
			return this;
		}

		public void unsetMerchant_sn() {
			this.merchant_sn = null;
		}

		/**
		 * Returns true if field merchant_sn is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetMerchant_sn() {
			return this.merchant_sn != null;
		}

		public void setMerchant_snIsSet(boolean value) {
			if (!value) {
				this.merchant_sn = null;
			}
		}

		public String getHw() {
			return this.hw;
		}

		public sotpGen_args setHw(String hw) {
			this.hw = hw;
			return this;
		}

		public void unsetHw() {
			this.hw = null;
		}

		/**
		 * Returns true if field hw is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetHw() {
			return this.hw != null;
		}

		public void setHwIsSet(boolean value) {
			if (!value) {
				this.hw = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((Integer) value);
				}
				break;

			case MERCHANT_SN:
				if (value == null) {
					unsetMerchant_sn();
				} else {
					setMerchant_sn((String) value);
				}
				break;

			case HW:
				if (value == null) {
					unsetHw();
				} else {
					setHw((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TYPE:
				return getType();

			case MERCHANT_SN:
				return getMerchant_sn();

			case HW:
				return getHw();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TYPE:
				return isSetType();
			case MERCHANT_SN:
				return isSetMerchant_sn();
			case HW:
				return isSetHw();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpGen_args)
				return this.equals((sotpGen_args) that);
			return false;
		}

		public boolean equals(sotpGen_args that) {
			if (that == null)
				return false;

			boolean this_present_type = true;
			boolean that_present_type = true;
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (this.type != that.type)
					return false;
			}

			boolean this_present_merchant_sn = true && this.isSetMerchant_sn();
			boolean that_present_merchant_sn = true && that.isSetMerchant_sn();
			if (this_present_merchant_sn || that_present_merchant_sn) {
				if (!(this_present_merchant_sn && that_present_merchant_sn))
					return false;
				if (!this.merchant_sn.equals(that.merchant_sn))
					return false;
			}

			boolean this_present_hw = true && this.isSetHw();
			boolean that_present_hw = true && that.isSetHw();
			if (this_present_hw || that_present_hw) {
				if (!(this_present_hw && that_present_hw))
					return false;
				if (!this.hw.equals(that.hw))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_type = true;
			list.add(present_type);
			if (present_type)
				list.add(type);

			boolean present_merchant_sn = true && (isSetMerchant_sn());
			list.add(present_merchant_sn);
			if (present_merchant_sn)
				list.add(merchant_sn);

			boolean present_hw = true && (isSetHw());
			list.add(present_hw);
			if (present_hw)
				list.add(hw);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpGen_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetMerchant_sn()).compareTo(other.isSetMerchant_sn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMerchant_sn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchant_sn, other.merchant_sn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetHw()).compareTo(other.isSetHw());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHw()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hw, other.hw);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpGen_args(");
			boolean first = true;

			sb.append("type:");
			sb.append(this.type);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("merchant_sn:");
			if (this.merchant_sn == null) {
				sb.append("null");
			} else {
				sb.append(this.merchant_sn);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("hw:");
			if (this.hw == null) {
				sb.append("null");
			} else {
				sb.append(this.hw);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TYPE((short) 1, "type"), MERCHANT_SN((short) 2, "merchant_sn"), HW((short) 3, "hw");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TYPE
					return TYPE;
				case 2: // MERCHANT_SN
					return MERCHANT_SN;
				case 3: // HW
					return HW;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpGen_argsStandardSchemeFactory implements SchemeFactory {
			public sotpGen_argsStandardScheme getScheme() {
				return new sotpGen_argsStandardScheme();
			}
		}

		private static class sotpGen_argsStandardScheme extends StandardScheme<sotpGen_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpGen_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = iprot.readI32();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // MERCHANT_SN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.merchant_sn = iprot.readString();
							struct.setMerchant_snIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // HW
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.hw = iprot.readString();
							struct.setHwIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpGen_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
				if (struct.merchant_sn != null) {
					oprot.writeFieldBegin(MERCHANT_SN_FIELD_DESC);
					oprot.writeString(struct.merchant_sn);
					oprot.writeFieldEnd();
				}
				if (struct.hw != null) {
					oprot.writeFieldBegin(HW_FIELD_DESC);
					oprot.writeString(struct.hw);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpGen_argsTupleSchemeFactory implements SchemeFactory {
			public sotpGen_argsTupleScheme getScheme() {
				return new sotpGen_argsTupleScheme();
			}
		}

		private static class sotpGen_argsTupleScheme extends TupleScheme<sotpGen_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpGen_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetType()) {
					optionals.set(0);
				}
				if (struct.isSetMerchant_sn()) {
					optionals.set(1);
				}
				if (struct.isSetHw()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetType()) {
					oprot.writeI32(struct.type);
				}
				if (struct.isSetMerchant_sn()) {
					oprot.writeString(struct.merchant_sn);
				}
				if (struct.isSetHw()) {
					oprot.writeString(struct.hw);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpGen_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.type = iprot.readI32();
					struct.setTypeIsSet(true);
				}
				if (incoming.get(1)) {
					struct.merchant_sn = iprot.readString();
					struct.setMerchant_snIsSet(true);
				}
				if (incoming.get(2)) {
					struct.hw = iprot.readString();
					struct.setHwIsSet(true);
				}
			}
		}

	}

	public static class sotpGen_result implements org.apache.thrift.TBase<sotpGen_result, sotpGen_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<sotpGen_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpGen_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new sotpGen_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpGen_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpPlugin.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpGen_result.class, metaDataMap);
		}

		public SotpPlugin success; // required

		public sotpGen_result() {
		}

		public sotpGen_result(SotpPlugin success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpGen_result(sotpGen_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpPlugin(other.success);
			}
		}

		public sotpGen_result deepCopy() {
			return new sotpGen_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpPlugin getSuccess() {
			return this.success;
		}

		public sotpGen_result setSuccess(SotpPlugin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpPlugin) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpGen_result)
				return this.equals((sotpGen_result) that);
			return false;
		}

		public boolean equals(sotpGen_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpGen_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpGen_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpGen_resultStandardSchemeFactory implements SchemeFactory {
			public sotpGen_resultStandardScheme getScheme() {
				return new sotpGen_resultStandardScheme();
			}
		}

		private static class sotpGen_resultStandardScheme extends StandardScheme<sotpGen_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpGen_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpPlugin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpGen_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpGen_resultTupleSchemeFactory implements SchemeFactory {
			public sotpGen_resultTupleScheme getScheme() {
				return new sotpGen_resultTupleScheme();
			}
		}

		private static class sotpGen_resultTupleScheme extends TupleScheme<sotpGen_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpGen_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpGen_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpPlugin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class sotpEncrypt_args implements org.apache.thrift.TBase<sotpEncrypt_args, sotpEncrypt_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<sotpEncrypt_args> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpEncrypt_args");
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField PLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "plain", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new sotpEncrypt_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpEncrypt_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PLAIN, new org.apache.thrift.meta_data.FieldMetaData("plain",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpEncrypt_args.class, metaDataMap);
		}

		public String seed; // required
		public String plain; // required

		public sotpEncrypt_args() {
		}

		public sotpEncrypt_args(String seed, String plain) {
			this();
			this.seed = seed;
			this.plain = plain;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpEncrypt_args(sotpEncrypt_args other) {
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			if (other.isSetPlain()) {
				this.plain = other.plain;
			}
		}

		public sotpEncrypt_args deepCopy() {
			return new sotpEncrypt_args(this);
		}

		@Override
		public void clear() {
			this.seed = null;
			this.plain = null;
		}

		public String getSeed() {
			return this.seed;
		}

		public sotpEncrypt_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public String getPlain() {
			return this.plain;
		}

		public sotpEncrypt_args setPlain(String plain) {
			this.plain = plain;
			return this;
		}

		public void unsetPlain() {
			this.plain = null;
		}

		/**
		 * Returns true if field plain is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPlain() {
			return this.plain != null;
		}

		public void setPlainIsSet(boolean value) {
			if (!value) {
				this.plain = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case PLAIN:
				if (value == null) {
					unsetPlain();
				} else {
					setPlain((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SEED:
				return getSeed();

			case PLAIN:
				return getPlain();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SEED:
				return isSetSeed();
			case PLAIN:
				return isSetPlain();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpEncrypt_args)
				return this.equals((sotpEncrypt_args) that);
			return false;
		}

		public boolean equals(sotpEncrypt_args that) {
			if (that == null)
				return false;

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_plain = true && this.isSetPlain();
			boolean that_present_plain = true && that.isSetPlain();
			if (this_present_plain || that_present_plain) {
				if (!(this_present_plain && that_present_plain))
					return false;
				if (!this.plain.equals(that.plain))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_plain = true && (isSetPlain());
			list.add(present_plain);
			if (present_plain)
				list.add(plain);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpEncrypt_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPlain()).compareTo(other.isSetPlain());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPlain()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plain, other.plain);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpEncrypt_args(");
			boolean first = true;

			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("plain:");
			if (this.plain == null) {
				sb.append("null");
			} else {
				sb.append(this.plain);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SEED((short) 1, "seed"), PLAIN((short) 2, "plain");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SEED
					return SEED;
				case 2: // PLAIN
					return PLAIN;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpEncrypt_argsStandardSchemeFactory implements SchemeFactory {
			public sotpEncrypt_argsStandardScheme getScheme() {
				return new sotpEncrypt_argsStandardScheme();
			}
		}

		private static class sotpEncrypt_argsStandardScheme extends StandardScheme<sotpEncrypt_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // PLAIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.plain = iprot.readString();
							struct.setPlainIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				if (struct.plain != null) {
					oprot.writeFieldBegin(PLAIN_FIELD_DESC);
					oprot.writeString(struct.plain);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpEncrypt_argsTupleSchemeFactory implements SchemeFactory {
			public sotpEncrypt_argsTupleScheme getScheme() {
				return new sotpEncrypt_argsTupleScheme();
			}
		}

		private static class sotpEncrypt_argsTupleScheme extends TupleScheme<sotpEncrypt_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSeed()) {
					optionals.set(0);
				}
				if (struct.isSetPlain()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetPlain()) {
					oprot.writeString(struct.plain);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(1)) {
					struct.plain = iprot.readString();
					struct.setPlainIsSet(true);
				}
			}
		}

	}

	public static class sotpEncrypt_result
	        implements org.apache.thrift.TBase<sotpEncrypt_result, sotpEncrypt_result._Fields>, java.io.Serializable,
	        Cloneable, Comparable<sotpEncrypt_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpEncrypt_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new sotpEncrypt_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpEncrypt_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpEncrypt_result.class, metaDataMap);
		}

		public SotpRet success; // required

		public sotpEncrypt_result() {
		}

		public sotpEncrypt_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpEncrypt_result(sotpEncrypt_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public sotpEncrypt_result deepCopy() {
			return new sotpEncrypt_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public sotpEncrypt_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpEncrypt_result)
				return this.equals((sotpEncrypt_result) that);
			return false;
		}

		public boolean equals(sotpEncrypt_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpEncrypt_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpEncrypt_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpEncrypt_resultStandardSchemeFactory implements SchemeFactory {
			public sotpEncrypt_resultStandardScheme getScheme() {
				return new sotpEncrypt_resultStandardScheme();
			}
		}

		private static class sotpEncrypt_resultStandardScheme extends StandardScheme<sotpEncrypt_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpEncrypt_resultTupleSchemeFactory implements SchemeFactory {
			public sotpEncrypt_resultTupleScheme getScheme() {
				return new sotpEncrypt_resultTupleScheme();
			}
		}

		private static class sotpEncrypt_resultTupleScheme extends TupleScheme<sotpEncrypt_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class sotpDecrypt_args implements org.apache.thrift.TBase<sotpDecrypt_args, sotpDecrypt_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<sotpDecrypt_args> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpDecrypt_args");
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField CIPHER_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "cipher", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new sotpDecrypt_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpDecrypt_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CIPHER, new org.apache.thrift.meta_data.FieldMetaData("cipher",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpDecrypt_args.class, metaDataMap);
		}

		public String seed; // required
		public String cipher; // required

		public sotpDecrypt_args() {
		}

		public sotpDecrypt_args(String seed, String cipher) {
			this();
			this.seed = seed;
			this.cipher = cipher;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpDecrypt_args(sotpDecrypt_args other) {
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			if (other.isSetCipher()) {
				this.cipher = other.cipher;
			}
		}

		public sotpDecrypt_args deepCopy() {
			return new sotpDecrypt_args(this);
		}

		@Override
		public void clear() {
			this.seed = null;
			this.cipher = null;
		}

		public String getSeed() {
			return this.seed;
		}

		public sotpDecrypt_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public String getCipher() {
			return this.cipher;
		}

		public sotpDecrypt_args setCipher(String cipher) {
			this.cipher = cipher;
			return this;
		}

		public void unsetCipher() {
			this.cipher = null;
		}

		/**
		 * Returns true if field cipher is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCipher() {
			return this.cipher != null;
		}

		public void setCipherIsSet(boolean value) {
			if (!value) {
				this.cipher = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case CIPHER:
				if (value == null) {
					unsetCipher();
				} else {
					setCipher((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SEED:
				return getSeed();

			case CIPHER:
				return getCipher();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SEED:
				return isSetSeed();
			case CIPHER:
				return isSetCipher();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpDecrypt_args)
				return this.equals((sotpDecrypt_args) that);
			return false;
		}

		public boolean equals(sotpDecrypt_args that) {
			if (that == null)
				return false;

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_cipher = true && this.isSetCipher();
			boolean that_present_cipher = true && that.isSetCipher();
			if (this_present_cipher || that_present_cipher) {
				if (!(this_present_cipher && that_present_cipher))
					return false;
				if (!this.cipher.equals(that.cipher))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_cipher = true && (isSetCipher());
			list.add(present_cipher);
			if (present_cipher)
				list.add(cipher);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpDecrypt_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCipher()).compareTo(other.isSetCipher());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCipher()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cipher, other.cipher);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpDecrypt_args(");
			boolean first = true;

			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cipher:");
			if (this.cipher == null) {
				sb.append("null");
			} else {
				sb.append(this.cipher);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SEED((short) 1, "seed"), CIPHER((short) 2, "cipher");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SEED
					return SEED;
				case 2: // CIPHER
					return CIPHER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpDecrypt_argsStandardSchemeFactory implements SchemeFactory {
			public sotpDecrypt_argsStandardScheme getScheme() {
				return new sotpDecrypt_argsStandardScheme();
			}
		}

		private static class sotpDecrypt_argsStandardScheme extends StandardScheme<sotpDecrypt_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CIPHER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.cipher = iprot.readString();
							struct.setCipherIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				if (struct.cipher != null) {
					oprot.writeFieldBegin(CIPHER_FIELD_DESC);
					oprot.writeString(struct.cipher);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpDecrypt_argsTupleSchemeFactory implements SchemeFactory {
			public sotpDecrypt_argsTupleScheme getScheme() {
				return new sotpDecrypt_argsTupleScheme();
			}
		}

		private static class sotpDecrypt_argsTupleScheme extends TupleScheme<sotpDecrypt_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSeed()) {
					optionals.set(0);
				}
				if (struct.isSetCipher()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetCipher()) {
					oprot.writeString(struct.cipher);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cipher = iprot.readString();
					struct.setCipherIsSet(true);
				}
			}
		}

	}

	public static class sotpDecrypt_result
	        implements org.apache.thrift.TBase<sotpDecrypt_result, sotpDecrypt_result._Fields>, java.io.Serializable,
	        Cloneable, Comparable<sotpDecrypt_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpDecrypt_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new sotpDecrypt_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpDecrypt_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpDecrypt_result.class, metaDataMap);
		}

		public SotpRet success; // required

		public sotpDecrypt_result() {
		}

		public sotpDecrypt_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpDecrypt_result(sotpDecrypt_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public sotpDecrypt_result deepCopy() {
			return new sotpDecrypt_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public sotpDecrypt_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpDecrypt_result)
				return this.equals((sotpDecrypt_result) that);
			return false;
		}

		public boolean equals(sotpDecrypt_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpDecrypt_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpDecrypt_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpDecrypt_resultStandardSchemeFactory implements SchemeFactory {
			public sotpDecrypt_resultStandardScheme getScheme() {
				return new sotpDecrypt_resultStandardScheme();
			}
		}

		private static class sotpDecrypt_resultStandardScheme extends StandardScheme<sotpDecrypt_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpDecrypt_resultTupleSchemeFactory implements SchemeFactory {
			public sotpDecrypt_resultTupleScheme getScheme() {
				return new sotpDecrypt_resultTupleScheme();
			}
		}

		private static class sotpDecrypt_resultTupleScheme extends TupleScheme<sotpDecrypt_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class sotpVerify_args implements org.apache.thrift.TBase<sotpVerify_args, sotpVerify_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<sotpVerify_args> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpVerify_args");
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "type", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "time", org.apache.thrift.protocol.TType.I32, (short) 3);
		private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "window", org.apache.thrift.protocol.TType.I32, (short) 4);
		private static final org.apache.thrift.protocol.TField PIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "pin", org.apache.thrift.protocol.TType.STRING, (short) 5);
		private static final org.apache.thrift.protocol.TField CHALLENGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "challenge", org.apache.thrift.protocol.TType.STRING, (short) 6);
		private static final org.apache.thrift.protocol.TField VERIFYCODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "verifycode", org.apache.thrift.protocol.TType.STRING, (short) 7);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __TYPE_ISSET_ID = 0;
		private static final int __TIME_ISSET_ID = 1;
		private static final int __WINDOW_ISSET_ID = 2;

		static {
			schemes.put(StandardScheme.class, new sotpVerify_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpVerify_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.TYPE,
			        new org.apache.thrift.meta_data.FieldMetaData("type",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TIME,
			        new org.apache.thrift.meta_data.FieldMetaData("time",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.WINDOW,
			        new org.apache.thrift.meta_data.FieldMetaData("window",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.PIN, new org.apache.thrift.meta_data.FieldMetaData("pin",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CHALLENGE, new org.apache.thrift.meta_data.FieldMetaData("challenge",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERIFYCODE, new org.apache.thrift.meta_data.FieldMetaData("verifycode",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpVerify_args.class, metaDataMap);
		}

		public int type; // required
		public String seed; // required
		public int time; // required
		public int window; // required
		public String pin; // required
		public String challenge; // required
		public String verifycode; // required
		private byte __isset_bitfield = 0;

		public sotpVerify_args() {
		}

		public sotpVerify_args(int type, String seed, int time, int window, String pin, String challenge,
		        String verifycode) {
			this();
			this.type = type;
			setTypeIsSet(true);
			this.seed = seed;
			this.time = time;
			setTimeIsSet(true);
			this.window = window;
			setWindowIsSet(true);
			this.pin = pin;
			this.challenge = challenge;
			this.verifycode = verifycode;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpVerify_args(sotpVerify_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.type = other.type;
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			this.time = other.time;
			this.window = other.window;
			if (other.isSetPin()) {
				this.pin = other.pin;
			}
			if (other.isSetChallenge()) {
				this.challenge = other.challenge;
			}
			if (other.isSetVerifycode()) {
				this.verifycode = other.verifycode;
			}
		}

		public sotpVerify_args deepCopy() {
			return new sotpVerify_args(this);
		}

		@Override
		public void clear() {
			setTypeIsSet(false);
			this.type = 0;
			this.seed = null;
			setTimeIsSet(false);
			this.time = 0;
			setWindowIsSet(false);
			this.window = 0;
			this.pin = null;
			this.challenge = null;
			this.verifycode = null;
		}

		public int getType() {
			return this.type;
		}

		public sotpVerify_args setType(int type) {
			this.type = type;
			setTypeIsSet(true);
			return this;
		}

		public void unsetType() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		public void setTypeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
		}

		public String getSeed() {
			return this.seed;
		}

		public sotpVerify_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public int getTime() {
			return this.time;
		}

		public sotpVerify_args setTime(int time) {
			this.time = time;
			setTimeIsSet(true);
			return this;
		}

		public void unsetTime() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
		}

		/**
		 * Returns true if field time is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetTime() {
			return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
		}

		public void setTimeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
		}

		public int getWindow() {
			return this.window;
		}

		public sotpVerify_args setWindow(int window) {
			this.window = window;
			setWindowIsSet(true);
			return this;
		}

		public void unsetWindow() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
		}

		/**
		 * Returns true if field window is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetWindow() {
			return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
		}

		public void setWindowIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
		}

		public String getPin() {
			return this.pin;
		}

		public sotpVerify_args setPin(String pin) {
			this.pin = pin;
			return this;
		}

		public void unsetPin() {
			this.pin = null;
		}

		/**
		 * Returns true if field pin is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPin() {
			return this.pin != null;
		}

		public void setPinIsSet(boolean value) {
			if (!value) {
				this.pin = null;
			}
		}

		public String getChallenge() {
			return this.challenge;
		}

		public sotpVerify_args setChallenge(String challenge) {
			this.challenge = challenge;
			return this;
		}

		public void unsetChallenge() {
			this.challenge = null;
		}

		/**
		 * Returns true if field challenge is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetChallenge() {
			return this.challenge != null;
		}

		public void setChallengeIsSet(boolean value) {
			if (!value) {
				this.challenge = null;
			}
		}

		public String getVerifycode() {
			return this.verifycode;
		}

		public sotpVerify_args setVerifycode(String verifycode) {
			this.verifycode = verifycode;
			return this;
		}

		public void unsetVerifycode() {
			this.verifycode = null;
		}

		/**
		 * Returns true if field verifycode is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetVerifycode() {
			return this.verifycode != null;
		}

		public void setVerifycodeIsSet(boolean value) {
			if (!value) {
				this.verifycode = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((Integer) value);
				}
				break;

			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case TIME:
				if (value == null) {
					unsetTime();
				} else {
					setTime((Integer) value);
				}
				break;

			case WINDOW:
				if (value == null) {
					unsetWindow();
				} else {
					setWindow((Integer) value);
				}
				break;

			case PIN:
				if (value == null) {
					unsetPin();
				} else {
					setPin((String) value);
				}
				break;

			case CHALLENGE:
				if (value == null) {
					unsetChallenge();
				} else {
					setChallenge((String) value);
				}
				break;

			case VERIFYCODE:
				if (value == null) {
					unsetVerifycode();
				} else {
					setVerifycode((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TYPE:
				return getType();

			case SEED:
				return getSeed();

			case TIME:
				return getTime();

			case WINDOW:
				return getWindow();

			case PIN:
				return getPin();

			case CHALLENGE:
				return getChallenge();

			case VERIFYCODE:
				return getVerifycode();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TYPE:
				return isSetType();
			case SEED:
				return isSetSeed();
			case TIME:
				return isSetTime();
			case WINDOW:
				return isSetWindow();
			case PIN:
				return isSetPin();
			case CHALLENGE:
				return isSetChallenge();
			case VERIFYCODE:
				return isSetVerifycode();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpVerify_args)
				return this.equals((sotpVerify_args) that);
			return false;
		}

		public boolean equals(sotpVerify_args that) {
			if (that == null)
				return false;

			boolean this_present_type = true;
			boolean that_present_type = true;
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (this.type != that.type)
					return false;
			}

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_time = true;
			boolean that_present_time = true;
			if (this_present_time || that_present_time) {
				if (!(this_present_time && that_present_time))
					return false;
				if (this.time != that.time)
					return false;
			}

			boolean this_present_window = true;
			boolean that_present_window = true;
			if (this_present_window || that_present_window) {
				if (!(this_present_window && that_present_window))
					return false;
				if (this.window != that.window)
					return false;
			}

			boolean this_present_pin = true && this.isSetPin();
			boolean that_present_pin = true && that.isSetPin();
			if (this_present_pin || that_present_pin) {
				if (!(this_present_pin && that_present_pin))
					return false;
				if (!this.pin.equals(that.pin))
					return false;
			}

			boolean this_present_challenge = true && this.isSetChallenge();
			boolean that_present_challenge = true && that.isSetChallenge();
			if (this_present_challenge || that_present_challenge) {
				if (!(this_present_challenge && that_present_challenge))
					return false;
				if (!this.challenge.equals(that.challenge))
					return false;
			}

			boolean this_present_verifycode = true && this.isSetVerifycode();
			boolean that_present_verifycode = true && that.isSetVerifycode();
			if (this_present_verifycode || that_present_verifycode) {
				if (!(this_present_verifycode && that_present_verifycode))
					return false;
				if (!this.verifycode.equals(that.verifycode))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_type = true;
			list.add(present_type);
			if (present_type)
				list.add(type);

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_time = true;
			list.add(present_time);
			if (present_time)
				list.add(time);

			boolean present_window = true;
			list.add(present_window);
			if (present_window)
				list.add(window);

			boolean present_pin = true && (isSetPin());
			list.add(present_pin);
			if (present_pin)
				list.add(pin);

			boolean present_challenge = true && (isSetChallenge());
			list.add(present_challenge);
			if (present_challenge)
				list.add(challenge);

			boolean present_verifycode = true && (isSetVerifycode());
			list.add(present_verifycode);
			if (present_verifycode)
				list.add(verifycode);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpVerify_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTime()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetWindow()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPin()).compareTo(other.isSetPin());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPin()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pin, other.pin);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetChallenge()).compareTo(other.isSetChallenge());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetChallenge()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.challenge, other.challenge);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVerifycode()).compareTo(other.isSetVerifycode());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVerifycode()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifycode, other.verifycode);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpVerify_args(");
			boolean first = true;

			sb.append("type:");
			sb.append(this.type);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("time:");
			sb.append(this.time);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("window:");
			sb.append(this.window);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pin:");
			if (this.pin == null) {
				sb.append("null");
			} else {
				sb.append(this.pin);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("challenge:");
			if (this.challenge == null) {
				sb.append("null");
			} else {
				sb.append(this.challenge);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("verifycode:");
			if (this.verifycode == null) {
				sb.append("null");
			} else {
				sb.append(this.verifycode);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TYPE((short) 1, "type"), SEED((short) 2, "seed"), TIME((short) 3, "time"), WINDOW((short) 4, "window"), PIN(
			        (short) 5, "pin"), CHALLENGE((short) 6, "challenge"), VERIFYCODE((short) 7, "verifycode");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TYPE
					return TYPE;
				case 2: // SEED
					return SEED;
				case 3: // TIME
					return TIME;
				case 4: // WINDOW
					return WINDOW;
				case 5: // PIN
					return PIN;
				case 6: // CHALLENGE
					return CHALLENGE;
				case 7: // VERIFYCODE
					return VERIFYCODE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpVerify_argsStandardSchemeFactory implements SchemeFactory {
			public sotpVerify_argsStandardScheme getScheme() {
				return new sotpVerify_argsStandardScheme();
			}
		}

		private static class sotpVerify_argsStandardScheme extends StandardScheme<sotpVerify_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = iprot.readI32();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // TIME
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.time = iprot.readI32();
							struct.setTimeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // WINDOW
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.window = iprot.readI32();
							struct.setWindowIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // PIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.pin = iprot.readString();
							struct.setPinIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 6: // CHALLENGE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.challenge = iprot.readString();
							struct.setChallengeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 7: // VERIFYCODE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.verifycode = iprot.readString();
							struct.setVerifycodeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(TIME_FIELD_DESC);
				oprot.writeI32(struct.time);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(WINDOW_FIELD_DESC);
				oprot.writeI32(struct.window);
				oprot.writeFieldEnd();
				if (struct.pin != null) {
					oprot.writeFieldBegin(PIN_FIELD_DESC);
					oprot.writeString(struct.pin);
					oprot.writeFieldEnd();
				}
				if (struct.challenge != null) {
					oprot.writeFieldBegin(CHALLENGE_FIELD_DESC);
					oprot.writeString(struct.challenge);
					oprot.writeFieldEnd();
				}
				if (struct.verifycode != null) {
					oprot.writeFieldBegin(VERIFYCODE_FIELD_DESC);
					oprot.writeString(struct.verifycode);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpVerify_argsTupleSchemeFactory implements SchemeFactory {
			public sotpVerify_argsTupleScheme getScheme() {
				return new sotpVerify_argsTupleScheme();
			}
		}

		private static class sotpVerify_argsTupleScheme extends TupleScheme<sotpVerify_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetType()) {
					optionals.set(0);
				}
				if (struct.isSetSeed()) {
					optionals.set(1);
				}
				if (struct.isSetTime()) {
					optionals.set(2);
				}
				if (struct.isSetWindow()) {
					optionals.set(3);
				}
				if (struct.isSetPin()) {
					optionals.set(4);
				}
				if (struct.isSetChallenge()) {
					optionals.set(5);
				}
				if (struct.isSetVerifycode()) {
					optionals.set(6);
				}
				oprot.writeBitSet(optionals, 7);
				if (struct.isSetType()) {
					oprot.writeI32(struct.type);
				}
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetTime()) {
					oprot.writeI32(struct.time);
				}
				if (struct.isSetWindow()) {
					oprot.writeI32(struct.window);
				}
				if (struct.isSetPin()) {
					oprot.writeString(struct.pin);
				}
				if (struct.isSetChallenge()) {
					oprot.writeString(struct.challenge);
				}
				if (struct.isSetVerifycode()) {
					oprot.writeString(struct.verifycode);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(7);
				if (incoming.get(0)) {
					struct.type = iprot.readI32();
					struct.setTypeIsSet(true);
				}
				if (incoming.get(1)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(2)) {
					struct.time = iprot.readI32();
					struct.setTimeIsSet(true);
				}
				if (incoming.get(3)) {
					struct.window = iprot.readI32();
					struct.setWindowIsSet(true);
				}
				if (incoming.get(4)) {
					struct.pin = iprot.readString();
					struct.setPinIsSet(true);
				}
				if (incoming.get(5)) {
					struct.challenge = iprot.readString();
					struct.setChallengeIsSet(true);
				}
				if (incoming.get(6)) {
					struct.verifycode = iprot.readString();
					struct.setVerifycodeIsSet(true);
				}
			}
		}

	}

	public static class sotpVerify_result
	        implements org.apache.thrift.TBase<sotpVerify_result, sotpVerify_result._Fields>, java.io.Serializable,
	        Cloneable, Comparable<sotpVerify_result> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "sotpVerify_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		static {
			schemes.put(StandardScheme.class, new sotpVerify_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sotpVerify_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sotpVerify_result.class, metaDataMap);
		}

		public int success; // required
		private byte __isset_bitfield = 0;

		public sotpVerify_result() {
		}

		public sotpVerify_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sotpVerify_result(sotpVerify_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public sotpVerify_result deepCopy() {
			return new sotpVerify_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public sotpVerify_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sotpVerify_result)
				return this.equals((sotpVerify_result) that);
			return false;
		}

		public boolean equals(sotpVerify_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sotpVerify_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sotpVerify_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class sotpVerify_resultStandardSchemeFactory implements SchemeFactory {
			public sotpVerify_resultStandardScheme getScheme() {
				return new sotpVerify_resultStandardScheme();
			}
		}

		private static class sotpVerify_resultStandardScheme extends StandardScheme<sotpVerify_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sotpVerify_resultTupleSchemeFactory implements SchemeFactory {
			public sotpVerify_resultTupleScheme getScheme() {
				return new sotpVerify_resultTupleScheme();
			}
		}

		private static class sotpVerify_resultTupleScheme extends TupleScheme<sotpVerify_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class merchant_getSDK_args
	        implements org.apache.thrift.TBase<merchant_getSDK_args, merchant_getSDK_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_getSDK_args> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_getSDK_args");
		private static final org.apache.thrift.protocol.TField MERCHANT_SN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "merchant_sn", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "version", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_getSDK_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_getSDK_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.MERCHANT_SN, new org.apache.thrift.meta_data.FieldMetaData("merchant_sn",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_getSDK_args.class, metaDataMap);
		}

		public String merchant_sn; // required
		public String version; // required

		public merchant_getSDK_args() {
		}

		public merchant_getSDK_args(String merchant_sn, String version) {
			this();
			this.merchant_sn = merchant_sn;
			this.version = version;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_getSDK_args(merchant_getSDK_args other) {
			if (other.isSetMerchant_sn()) {
				this.merchant_sn = other.merchant_sn;
			}
			if (other.isSetVersion()) {
				this.version = other.version;
			}
		}

		public merchant_getSDK_args deepCopy() {
			return new merchant_getSDK_args(this);
		}

		@Override
		public void clear() {
			this.merchant_sn = null;
			this.version = null;
		}

		public String getMerchant_sn() {
			return this.merchant_sn;
		}

		public merchant_getSDK_args setMerchant_sn(String merchant_sn) {
			this.merchant_sn = merchant_sn;
			return this;
		}

		public void unsetMerchant_sn() {
			this.merchant_sn = null;
		}

		/**
		 * Returns true if field merchant_sn is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetMerchant_sn() {
			return this.merchant_sn != null;
		}

		public void setMerchant_snIsSet(boolean value) {
			if (!value) {
				this.merchant_sn = null;
			}
		}

		public String getVersion() {
			return this.version;
		}

		public merchant_getSDK_args setVersion(String version) {
			this.version = version;
			return this;
		}

		public void unsetVersion() {
			this.version = null;
		}

		/**
		 * Returns true if field version is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetVersion() {
			return this.version != null;
		}

		public void setVersionIsSet(boolean value) {
			if (!value) {
				this.version = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case MERCHANT_SN:
				if (value == null) {
					unsetMerchant_sn();
				} else {
					setMerchant_sn((String) value);
				}
				break;

			case VERSION:
				if (value == null) {
					unsetVersion();
				} else {
					setVersion((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case MERCHANT_SN:
				return getMerchant_sn();

			case VERSION:
				return getVersion();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case MERCHANT_SN:
				return isSetMerchant_sn();
			case VERSION:
				return isSetVersion();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_getSDK_args)
				return this.equals((merchant_getSDK_args) that);
			return false;
		}

		public boolean equals(merchant_getSDK_args that) {
			if (that == null)
				return false;

			boolean this_present_merchant_sn = true && this.isSetMerchant_sn();
			boolean that_present_merchant_sn = true && that.isSetMerchant_sn();
			if (this_present_merchant_sn || that_present_merchant_sn) {
				if (!(this_present_merchant_sn && that_present_merchant_sn))
					return false;
				if (!this.merchant_sn.equals(that.merchant_sn))
					return false;
			}

			boolean this_present_version = true && this.isSetVersion();
			boolean that_present_version = true && that.isSetVersion();
			if (this_present_version || that_present_version) {
				if (!(this_present_version && that_present_version))
					return false;
				if (!this.version.equals(that.version))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_merchant_sn = true && (isSetMerchant_sn());
			list.add(present_merchant_sn);
			if (present_merchant_sn)
				list.add(merchant_sn);

			boolean present_version = true && (isSetVersion());
			list.add(present_version);
			if (present_version)
				list.add(version);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_getSDK_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetMerchant_sn()).compareTo(other.isSetMerchant_sn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMerchant_sn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchant_sn, other.merchant_sn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVersion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_getSDK_args(");
			boolean first = true;

			sb.append("merchant_sn:");
			if (this.merchant_sn == null) {
				sb.append("null");
			} else {
				sb.append(this.merchant_sn);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("version:");
			if (this.version == null) {
				sb.append("null");
			} else {
				sb.append(this.version);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			MERCHANT_SN((short) 1, "merchant_sn"), VERSION((short) 2, "version");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // MERCHANT_SN
					return MERCHANT_SN;
				case 2: // VERSION
					return VERSION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_getSDK_argsStandardSchemeFactory implements SchemeFactory {
			public merchant_getSDK_argsStandardScheme getScheme() {
				return new merchant_getSDK_argsStandardScheme();
			}
		}

		private static class merchant_getSDK_argsStandardScheme extends StandardScheme<merchant_getSDK_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_getSDK_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // MERCHANT_SN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.merchant_sn = iprot.readString();
							struct.setMerchant_snIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // VERSION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.version = iprot.readString();
							struct.setVersionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_getSDK_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.merchant_sn != null) {
					oprot.writeFieldBegin(MERCHANT_SN_FIELD_DESC);
					oprot.writeString(struct.merchant_sn);
					oprot.writeFieldEnd();
				}
				if (struct.version != null) {
					oprot.writeFieldBegin(VERSION_FIELD_DESC);
					oprot.writeString(struct.version);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_getSDK_argsTupleSchemeFactory implements SchemeFactory {
			public merchant_getSDK_argsTupleScheme getScheme() {
				return new merchant_getSDK_argsTupleScheme();
			}
		}

		private static class merchant_getSDK_argsTupleScheme extends TupleScheme<merchant_getSDK_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_getSDK_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetMerchant_sn()) {
					optionals.set(0);
				}
				if (struct.isSetVersion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetMerchant_sn()) {
					oprot.writeString(struct.merchant_sn);
				}
				if (struct.isSetVersion()) {
					oprot.writeString(struct.version);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_getSDK_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.merchant_sn = iprot.readString();
					struct.setMerchant_snIsSet(true);
				}
				if (incoming.get(1)) {
					struct.version = iprot.readString();
					struct.setVersionIsSet(true);
				}
			}
		}

	}

	public static class merchant_getSDK_result
	        implements org.apache.thrift.TBase<merchant_getSDK_result, merchant_getSDK_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_getSDK_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_getSDK_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_getSDK_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_getSDK_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_getSDK_result.class, metaDataMap);
		}

		public SotpRet success; // required

		public merchant_getSDK_result() {
		}

		public merchant_getSDK_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_getSDK_result(merchant_getSDK_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public merchant_getSDK_result deepCopy() {
			return new merchant_getSDK_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public merchant_getSDK_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_getSDK_result)
				return this.equals((merchant_getSDK_result) that);
			return false;
		}

		public boolean equals(merchant_getSDK_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_getSDK_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_getSDK_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_getSDK_resultStandardSchemeFactory implements SchemeFactory {
			public merchant_getSDK_resultStandardScheme getScheme() {
				return new merchant_getSDK_resultStandardScheme();
			}
		}

		private static class merchant_getSDK_resultStandardScheme extends StandardScheme<merchant_getSDK_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_getSDK_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_getSDK_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_getSDK_resultTupleSchemeFactory implements SchemeFactory {
			public merchant_getSDK_resultTupleScheme getScheme() {
				return new merchant_getSDK_resultTupleScheme();
			}
		}

		private static class merchant_getSDK_resultTupleScheme extends TupleScheme<merchant_getSDK_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_getSDK_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_getSDK_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpGen_args
	        implements org.apache.thrift.TBase<merchant_sotpGen_args, merchant_sotpGen_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpGen_args> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpGen_args");
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "type", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField MERCHANT_SN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "merchant_sn", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField MERCHANT_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "merchant_seed", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final org.apache.thrift.protocol.TField APP_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "appSign", org.apache.thrift.protocol.TType.STRING, (short) 4);
		private static final org.apache.thrift.protocol.TField HW_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "hw", org.apache.thrift.protocol.TType.STRING, (short) 5);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __TYPE_ISSET_ID = 0;

		static {
			schemes.put(StandardScheme.class, new merchant_sotpGen_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpGen_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.TYPE,
			        new org.apache.thrift.meta_data.FieldMetaData("type",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.MERCHANT_SN, new org.apache.thrift.meta_data.FieldMetaData("merchant_sn",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.MERCHANT_SEED, new org.apache.thrift.meta_data.FieldMetaData("merchant_seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.APP_SIGN, new org.apache.thrift.meta_data.FieldMetaData("appSign",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.HW, new org.apache.thrift.meta_data.FieldMetaData("hw",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpGen_args.class, metaDataMap);
		}

		public int type; // required
		public String merchant_sn; // required
		public String merchant_seed; // required
		public String appSign; // required
		public String hw; // required
		private byte __isset_bitfield = 0;

		public merchant_sotpGen_args() {
		}

		public merchant_sotpGen_args(int type, String merchant_sn, String merchant_seed, String appSign, String hw) {
			this();
			this.type = type;
			setTypeIsSet(true);
			this.merchant_sn = merchant_sn;
			this.merchant_seed = merchant_seed;
			this.appSign = appSign;
			this.hw = hw;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpGen_args(merchant_sotpGen_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.type = other.type;
			if (other.isSetMerchant_sn()) {
				this.merchant_sn = other.merchant_sn;
			}
			if (other.isSetMerchant_seed()) {
				this.merchant_seed = other.merchant_seed;
			}
			if (other.isSetAppSign()) {
				this.appSign = other.appSign;
			}
			if (other.isSetHw()) {
				this.hw = other.hw;
			}
		}

		public merchant_sotpGen_args deepCopy() {
			return new merchant_sotpGen_args(this);
		}

		@Override
		public void clear() {
			setTypeIsSet(false);
			this.type = 0;
			this.merchant_sn = null;
			this.merchant_seed = null;
			this.appSign = null;
			this.hw = null;
		}

		public int getType() {
			return this.type;
		}

		public merchant_sotpGen_args setType(int type) {
			this.type = type;
			setTypeIsSet(true);
			return this;
		}

		public void unsetType() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		public void setTypeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
		}

		public String getMerchant_sn() {
			return this.merchant_sn;
		}

		public merchant_sotpGen_args setMerchant_sn(String merchant_sn) {
			this.merchant_sn = merchant_sn;
			return this;
		}

		public void unsetMerchant_sn() {
			this.merchant_sn = null;
		}

		/**
		 * Returns true if field merchant_sn is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetMerchant_sn() {
			return this.merchant_sn != null;
		}

		public void setMerchant_snIsSet(boolean value) {
			if (!value) {
				this.merchant_sn = null;
			}
		}

		public String getMerchant_seed() {
			return this.merchant_seed;
		}

		public merchant_sotpGen_args setMerchant_seed(String merchant_seed) {
			this.merchant_seed = merchant_seed;
			return this;
		}

		public void unsetMerchant_seed() {
			this.merchant_seed = null;
		}

		/**
		 * Returns true if field merchant_seed is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetMerchant_seed() {
			return this.merchant_seed != null;
		}

		public void setMerchant_seedIsSet(boolean value) {
			if (!value) {
				this.merchant_seed = null;
			}
		}

		public String getAppSign() {
			return this.appSign;
		}

		public merchant_sotpGen_args setAppSign(String appSign) {
			this.appSign = appSign;
			return this;
		}

		public void unsetAppSign() {
			this.appSign = null;
		}

		/**
		 * Returns true if field appSign is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetAppSign() {
			return this.appSign != null;
		}

		public void setAppSignIsSet(boolean value) {
			if (!value) {
				this.appSign = null;
			}
		}

		public String getHw() {
			return this.hw;
		}

		public merchant_sotpGen_args setHw(String hw) {
			this.hw = hw;
			return this;
		}

		public void unsetHw() {
			this.hw = null;
		}

		/**
		 * Returns true if field hw is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetHw() {
			return this.hw != null;
		}

		public void setHwIsSet(boolean value) {
			if (!value) {
				this.hw = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((Integer) value);
				}
				break;

			case MERCHANT_SN:
				if (value == null) {
					unsetMerchant_sn();
				} else {
					setMerchant_sn((String) value);
				}
				break;

			case MERCHANT_SEED:
				if (value == null) {
					unsetMerchant_seed();
				} else {
					setMerchant_seed((String) value);
				}
				break;

			case APP_SIGN:
				if (value == null) {
					unsetAppSign();
				} else {
					setAppSign((String) value);
				}
				break;

			case HW:
				if (value == null) {
					unsetHw();
				} else {
					setHw((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TYPE:
				return getType();

			case MERCHANT_SN:
				return getMerchant_sn();

			case MERCHANT_SEED:
				return getMerchant_seed();

			case APP_SIGN:
				return getAppSign();

			case HW:
				return getHw();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TYPE:
				return isSetType();
			case MERCHANT_SN:
				return isSetMerchant_sn();
			case MERCHANT_SEED:
				return isSetMerchant_seed();
			case APP_SIGN:
				return isSetAppSign();
			case HW:
				return isSetHw();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpGen_args)
				return this.equals((merchant_sotpGen_args) that);
			return false;
		}

		public boolean equals(merchant_sotpGen_args that) {
			if (that == null)
				return false;

			boolean this_present_type = true;
			boolean that_present_type = true;
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (this.type != that.type)
					return false;
			}

			boolean this_present_merchant_sn = true && this.isSetMerchant_sn();
			boolean that_present_merchant_sn = true && that.isSetMerchant_sn();
			if (this_present_merchant_sn || that_present_merchant_sn) {
				if (!(this_present_merchant_sn && that_present_merchant_sn))
					return false;
				if (!this.merchant_sn.equals(that.merchant_sn))
					return false;
			}

			boolean this_present_merchant_seed = true && this.isSetMerchant_seed();
			boolean that_present_merchant_seed = true && that.isSetMerchant_seed();
			if (this_present_merchant_seed || that_present_merchant_seed) {
				if (!(this_present_merchant_seed && that_present_merchant_seed))
					return false;
				if (!this.merchant_seed.equals(that.merchant_seed))
					return false;
			}

			boolean this_present_appSign = true && this.isSetAppSign();
			boolean that_present_appSign = true && that.isSetAppSign();
			if (this_present_appSign || that_present_appSign) {
				if (!(this_present_appSign && that_present_appSign))
					return false;
				if (!this.appSign.equals(that.appSign))
					return false;
			}

			boolean this_present_hw = true && this.isSetHw();
			boolean that_present_hw = true && that.isSetHw();
			if (this_present_hw || that_present_hw) {
				if (!(this_present_hw && that_present_hw))
					return false;
				if (!this.hw.equals(that.hw))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_type = true;
			list.add(present_type);
			if (present_type)
				list.add(type);

			boolean present_merchant_sn = true && (isSetMerchant_sn());
			list.add(present_merchant_sn);
			if (present_merchant_sn)
				list.add(merchant_sn);

			boolean present_merchant_seed = true && (isSetMerchant_seed());
			list.add(present_merchant_seed);
			if (present_merchant_seed)
				list.add(merchant_seed);

			boolean present_appSign = true && (isSetAppSign());
			list.add(present_appSign);
			if (present_appSign)
				list.add(appSign);

			boolean present_hw = true && (isSetHw());
			list.add(present_hw);
			if (present_hw)
				list.add(hw);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpGen_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetMerchant_sn()).compareTo(other.isSetMerchant_sn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMerchant_sn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchant_sn, other.merchant_sn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetMerchant_seed()).compareTo(other.isSetMerchant_seed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMerchant_seed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchant_seed, other.merchant_seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetAppSign()).compareTo(other.isSetAppSign());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAppSign()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSign, other.appSign);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetHw()).compareTo(other.isSetHw());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHw()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hw, other.hw);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpGen_args(");
			boolean first = true;

			sb.append("type:");
			sb.append(this.type);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("merchant_sn:");
			if (this.merchant_sn == null) {
				sb.append("null");
			} else {
				sb.append(this.merchant_sn);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("merchant_seed:");
			if (this.merchant_seed == null) {
				sb.append("null");
			} else {
				sb.append(this.merchant_seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("appSign:");
			if (this.appSign == null) {
				sb.append("null");
			} else {
				sb.append(this.appSign);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("hw:");
			if (this.hw == null) {
				sb.append("null");
			} else {
				sb.append(this.hw);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TYPE((short) 1, "type"), MERCHANT_SN((short) 2, "merchant_sn"), MERCHANT_SEED((short) 3,
			        "merchant_seed"), APP_SIGN((short) 4, "appSign"), HW((short) 5, "hw");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TYPE
					return TYPE;
				case 2: // MERCHANT_SN
					return MERCHANT_SN;
				case 3: // MERCHANT_SEED
					return MERCHANT_SEED;
				case 4: // APP_SIGN
					return APP_SIGN;
				case 5: // HW
					return HW;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpGen_argsStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpGen_argsStandardScheme getScheme() {
				return new merchant_sotpGen_argsStandardScheme();
			}
		}

		private static class merchant_sotpGen_argsStandardScheme extends StandardScheme<merchant_sotpGen_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpGen_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = iprot.readI32();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // MERCHANT_SN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.merchant_sn = iprot.readString();
							struct.setMerchant_snIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // MERCHANT_SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.merchant_seed = iprot.readString();
							struct.setMerchant_seedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // APP_SIGN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.appSign = iprot.readString();
							struct.setAppSignIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // HW
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.hw = iprot.readString();
							struct.setHwIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpGen_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
				if (struct.merchant_sn != null) {
					oprot.writeFieldBegin(MERCHANT_SN_FIELD_DESC);
					oprot.writeString(struct.merchant_sn);
					oprot.writeFieldEnd();
				}
				if (struct.merchant_seed != null) {
					oprot.writeFieldBegin(MERCHANT_SEED_FIELD_DESC);
					oprot.writeString(struct.merchant_seed);
					oprot.writeFieldEnd();
				}
				if (struct.appSign != null) {
					oprot.writeFieldBegin(APP_SIGN_FIELD_DESC);
					oprot.writeString(struct.appSign);
					oprot.writeFieldEnd();
				}
				if (struct.hw != null) {
					oprot.writeFieldBegin(HW_FIELD_DESC);
					oprot.writeString(struct.hw);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpGen_argsTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpGen_argsTupleScheme getScheme() {
				return new merchant_sotpGen_argsTupleScheme();
			}
		}

		private static class merchant_sotpGen_argsTupleScheme extends TupleScheme<merchant_sotpGen_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpGen_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetType()) {
					optionals.set(0);
				}
				if (struct.isSetMerchant_sn()) {
					optionals.set(1);
				}
				if (struct.isSetMerchant_seed()) {
					optionals.set(2);
				}
				if (struct.isSetAppSign()) {
					optionals.set(3);
				}
				if (struct.isSetHw()) {
					optionals.set(4);
				}
				oprot.writeBitSet(optionals, 5);
				if (struct.isSetType()) {
					oprot.writeI32(struct.type);
				}
				if (struct.isSetMerchant_sn()) {
					oprot.writeString(struct.merchant_sn);
				}
				if (struct.isSetMerchant_seed()) {
					oprot.writeString(struct.merchant_seed);
				}
				if (struct.isSetAppSign()) {
					oprot.writeString(struct.appSign);
				}
				if (struct.isSetHw()) {
					oprot.writeString(struct.hw);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpGen_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(5);
				if (incoming.get(0)) {
					struct.type = iprot.readI32();
					struct.setTypeIsSet(true);
				}
				if (incoming.get(1)) {
					struct.merchant_sn = iprot.readString();
					struct.setMerchant_snIsSet(true);
				}
				if (incoming.get(2)) {
					struct.merchant_seed = iprot.readString();
					struct.setMerchant_seedIsSet(true);
				}
				if (incoming.get(3)) {
					struct.appSign = iprot.readString();
					struct.setAppSignIsSet(true);
				}
				if (incoming.get(4)) {
					struct.hw = iprot.readString();
					struct.setHwIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpGen_result
	        implements org.apache.thrift.TBase<merchant_sotpGen_result, merchant_sotpGen_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpGen_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpGen_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_sotpGen_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpGen_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpPlugin.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpGen_result.class, metaDataMap);
		}

		public SotpPlugin success; // required

		public merchant_sotpGen_result() {
		}

		public merchant_sotpGen_result(SotpPlugin success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpGen_result(merchant_sotpGen_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpPlugin(other.success);
			}
		}

		public merchant_sotpGen_result deepCopy() {
			return new merchant_sotpGen_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpPlugin getSuccess() {
			return this.success;
		}

		public merchant_sotpGen_result setSuccess(SotpPlugin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpPlugin) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpGen_result)
				return this.equals((merchant_sotpGen_result) that);
			return false;
		}

		public boolean equals(merchant_sotpGen_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpGen_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpGen_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpGen_resultStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpGen_resultStandardScheme getScheme() {
				return new merchant_sotpGen_resultStandardScheme();
			}
		}

		private static class merchant_sotpGen_resultStandardScheme extends StandardScheme<merchant_sotpGen_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpGen_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpPlugin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpGen_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpGen_resultTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpGen_resultTupleScheme getScheme() {
				return new merchant_sotpGen_resultTupleScheme();
			}
		}

		private static class merchant_sotpGen_resultTupleScheme extends TupleScheme<merchant_sotpGen_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpGen_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpGen_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpPlugin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpEncrypt_args
	        implements org.apache.thrift.TBase<merchant_sotpEncrypt_args, merchant_sotpEncrypt_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpEncrypt_args> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpEncrypt_args");
		private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "sn", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField PLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "plain", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_sotpEncrypt_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpEncrypt_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PLAIN, new org.apache.thrift.meta_data.FieldMetaData("plain",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpEncrypt_args.class,
			        metaDataMap);
		}

		public String sn; // required
		public String seed; // required
		public String plain; // required

		public merchant_sotpEncrypt_args() {
		}

		public merchant_sotpEncrypt_args(String sn, String seed, String plain) {
			this();
			this.sn = sn;
			this.seed = seed;
			this.plain = plain;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpEncrypt_args(merchant_sotpEncrypt_args other) {
			if (other.isSetSn()) {
				this.sn = other.sn;
			}
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			if (other.isSetPlain()) {
				this.plain = other.plain;
			}
		}

		public merchant_sotpEncrypt_args deepCopy() {
			return new merchant_sotpEncrypt_args(this);
		}

		@Override
		public void clear() {
			this.sn = null;
			this.seed = null;
			this.plain = null;
		}

		public String getSn() {
			return this.sn;
		}

		public merchant_sotpEncrypt_args setSn(String sn) {
			this.sn = sn;
			return this;
		}

		public void unsetSn() {
			this.sn = null;
		}

		/**
		 * Returns true if field sn is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSn() {
			return this.sn != null;
		}

		public void setSnIsSet(boolean value) {
			if (!value) {
				this.sn = null;
			}
		}

		public String getSeed() {
			return this.seed;
		}

		public merchant_sotpEncrypt_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public String getPlain() {
			return this.plain;
		}

		public merchant_sotpEncrypt_args setPlain(String plain) {
			this.plain = plain;
			return this;
		}

		public void unsetPlain() {
			this.plain = null;
		}

		/**
		 * Returns true if field plain is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPlain() {
			return this.plain != null;
		}

		public void setPlainIsSet(boolean value) {
			if (!value) {
				this.plain = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SN:
				if (value == null) {
					unsetSn();
				} else {
					setSn((String) value);
				}
				break;

			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case PLAIN:
				if (value == null) {
					unsetPlain();
				} else {
					setPlain((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SN:
				return getSn();

			case SEED:
				return getSeed();

			case PLAIN:
				return getPlain();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SN:
				return isSetSn();
			case SEED:
				return isSetSeed();
			case PLAIN:
				return isSetPlain();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpEncrypt_args)
				return this.equals((merchant_sotpEncrypt_args) that);
			return false;
		}

		public boolean equals(merchant_sotpEncrypt_args that) {
			if (that == null)
				return false;

			boolean this_present_sn = true && this.isSetSn();
			boolean that_present_sn = true && that.isSetSn();
			if (this_present_sn || that_present_sn) {
				if (!(this_present_sn && that_present_sn))
					return false;
				if (!this.sn.equals(that.sn))
					return false;
			}

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_plain = true && this.isSetPlain();
			boolean that_present_plain = true && that.isSetPlain();
			if (this_present_plain || that_present_plain) {
				if (!(this_present_plain && that_present_plain))
					return false;
				if (!this.plain.equals(that.plain))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_sn = true && (isSetSn());
			list.add(present_sn);
			if (present_sn)
				list.add(sn);

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_plain = true && (isSetPlain());
			list.add(present_plain);
			if (present_plain)
				list.add(plain);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpEncrypt_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPlain()).compareTo(other.isSetPlain());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPlain()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plain, other.plain);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpEncrypt_args(");
			boolean first = true;

			sb.append("sn:");
			if (this.sn == null) {
				sb.append("null");
			} else {
				sb.append(this.sn);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("plain:");
			if (this.plain == null) {
				sb.append("null");
			} else {
				sb.append(this.plain);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SN((short) 1, "sn"), SEED((short) 2, "seed"), PLAIN((short) 3, "plain");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SN
					return SN;
				case 2: // SEED
					return SEED;
				case 3: // PLAIN
					return PLAIN;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpEncrypt_argsStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpEncrypt_argsStandardScheme getScheme() {
				return new merchant_sotpEncrypt_argsStandardScheme();
			}
		}

		private static class merchant_sotpEncrypt_argsStandardScheme extends StandardScheme<merchant_sotpEncrypt_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sn = iprot.readString();
							struct.setSnIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PLAIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.plain = iprot.readString();
							struct.setPlainIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.sn != null) {
					oprot.writeFieldBegin(SN_FIELD_DESC);
					oprot.writeString(struct.sn);
					oprot.writeFieldEnd();
				}
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				if (struct.plain != null) {
					oprot.writeFieldBegin(PLAIN_FIELD_DESC);
					oprot.writeString(struct.plain);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpEncrypt_argsTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpEncrypt_argsTupleScheme getScheme() {
				return new merchant_sotpEncrypt_argsTupleScheme();
			}
		}

		private static class merchant_sotpEncrypt_argsTupleScheme extends TupleScheme<merchant_sotpEncrypt_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSn()) {
					optionals.set(0);
				}
				if (struct.isSetSeed()) {
					optionals.set(1);
				}
				if (struct.isSetPlain()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetSn()) {
					oprot.writeString(struct.sn);
				}
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetPlain()) {
					oprot.writeString(struct.plain);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpEncrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.sn = iprot.readString();
					struct.setSnIsSet(true);
				}
				if (incoming.get(1)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(2)) {
					struct.plain = iprot.readString();
					struct.setPlainIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpEncrypt_result
	        implements org.apache.thrift.TBase<merchant_sotpEncrypt_result, merchant_sotpEncrypt_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpEncrypt_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpEncrypt_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_sotpEncrypt_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpEncrypt_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpEncrypt_result.class,
			        metaDataMap);
		}

		public SotpRet success; // required

		public merchant_sotpEncrypt_result() {
		}

		public merchant_sotpEncrypt_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpEncrypt_result(merchant_sotpEncrypt_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public merchant_sotpEncrypt_result deepCopy() {
			return new merchant_sotpEncrypt_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public merchant_sotpEncrypt_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpEncrypt_result)
				return this.equals((merchant_sotpEncrypt_result) that);
			return false;
		}

		public boolean equals(merchant_sotpEncrypt_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpEncrypt_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpEncrypt_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpEncrypt_resultStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpEncrypt_resultStandardScheme getScheme() {
				return new merchant_sotpEncrypt_resultStandardScheme();
			}
		}

		private static class merchant_sotpEncrypt_resultStandardScheme
		        extends StandardScheme<merchant_sotpEncrypt_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpEncrypt_resultTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpEncrypt_resultTupleScheme getScheme() {
				return new merchant_sotpEncrypt_resultTupleScheme();
			}
		}

		private static class merchant_sotpEncrypt_resultTupleScheme extends TupleScheme<merchant_sotpEncrypt_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpEncrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpDecrypt_args
	        implements org.apache.thrift.TBase<merchant_sotpDecrypt_args, merchant_sotpDecrypt_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpDecrypt_args> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpDecrypt_args");
		private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "sn", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField CIPHER_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "cipher", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_sotpDecrypt_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpDecrypt_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CIPHER, new org.apache.thrift.meta_data.FieldMetaData("cipher",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpDecrypt_args.class,
			        metaDataMap);
		}

		public String sn; // required
		public String seed; // required
		public String cipher; // required

		public merchant_sotpDecrypt_args() {
		}

		public merchant_sotpDecrypt_args(String sn, String seed, String cipher) {
			this();
			this.sn = sn;
			this.seed = seed;
			this.cipher = cipher;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpDecrypt_args(merchant_sotpDecrypt_args other) {
			if (other.isSetSn()) {
				this.sn = other.sn;
			}
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			if (other.isSetCipher()) {
				this.cipher = other.cipher;
			}
		}

		public merchant_sotpDecrypt_args deepCopy() {
			return new merchant_sotpDecrypt_args(this);
		}

		@Override
		public void clear() {
			this.sn = null;
			this.seed = null;
			this.cipher = null;
		}

		public String getSn() {
			return this.sn;
		}

		public merchant_sotpDecrypt_args setSn(String sn) {
			this.sn = sn;
			return this;
		}

		public void unsetSn() {
			this.sn = null;
		}

		/**
		 * Returns true if field sn is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSn() {
			return this.sn != null;
		}

		public void setSnIsSet(boolean value) {
			if (!value) {
				this.sn = null;
			}
		}

		public String getSeed() {
			return this.seed;
		}

		public merchant_sotpDecrypt_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public String getCipher() {
			return this.cipher;
		}

		public merchant_sotpDecrypt_args setCipher(String cipher) {
			this.cipher = cipher;
			return this;
		}

		public void unsetCipher() {
			this.cipher = null;
		}

		/**
		 * Returns true if field cipher is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCipher() {
			return this.cipher != null;
		}

		public void setCipherIsSet(boolean value) {
			if (!value) {
				this.cipher = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SN:
				if (value == null) {
					unsetSn();
				} else {
					setSn((String) value);
				}
				break;

			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case CIPHER:
				if (value == null) {
					unsetCipher();
				} else {
					setCipher((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SN:
				return getSn();

			case SEED:
				return getSeed();

			case CIPHER:
				return getCipher();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SN:
				return isSetSn();
			case SEED:
				return isSetSeed();
			case CIPHER:
				return isSetCipher();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpDecrypt_args)
				return this.equals((merchant_sotpDecrypt_args) that);
			return false;
		}

		public boolean equals(merchant_sotpDecrypt_args that) {
			if (that == null)
				return false;

			boolean this_present_sn = true && this.isSetSn();
			boolean that_present_sn = true && that.isSetSn();
			if (this_present_sn || that_present_sn) {
				if (!(this_present_sn && that_present_sn))
					return false;
				if (!this.sn.equals(that.sn))
					return false;
			}

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_cipher = true && this.isSetCipher();
			boolean that_present_cipher = true && that.isSetCipher();
			if (this_present_cipher || that_present_cipher) {
				if (!(this_present_cipher && that_present_cipher))
					return false;
				if (!this.cipher.equals(that.cipher))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_sn = true && (isSetSn());
			list.add(present_sn);
			if (present_sn)
				list.add(sn);

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_cipher = true && (isSetCipher());
			list.add(present_cipher);
			if (present_cipher)
				list.add(cipher);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpDecrypt_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCipher()).compareTo(other.isSetCipher());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCipher()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cipher, other.cipher);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpDecrypt_args(");
			boolean first = true;

			sb.append("sn:");
			if (this.sn == null) {
				sb.append("null");
			} else {
				sb.append(this.sn);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cipher:");
			if (this.cipher == null) {
				sb.append("null");
			} else {
				sb.append(this.cipher);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SN((short) 1, "sn"), SEED((short) 2, "seed"), CIPHER((short) 3, "cipher");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SN
					return SN;
				case 2: // SEED
					return SEED;
				case 3: // CIPHER
					return CIPHER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpDecrypt_argsStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpDecrypt_argsStandardScheme getScheme() {
				return new merchant_sotpDecrypt_argsStandardScheme();
			}
		}

		private static class merchant_sotpDecrypt_argsStandardScheme extends StandardScheme<merchant_sotpDecrypt_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sn = iprot.readString();
							struct.setSnIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // CIPHER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.cipher = iprot.readString();
							struct.setCipherIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.sn != null) {
					oprot.writeFieldBegin(SN_FIELD_DESC);
					oprot.writeString(struct.sn);
					oprot.writeFieldEnd();
				}
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				if (struct.cipher != null) {
					oprot.writeFieldBegin(CIPHER_FIELD_DESC);
					oprot.writeString(struct.cipher);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpDecrypt_argsTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpDecrypt_argsTupleScheme getScheme() {
				return new merchant_sotpDecrypt_argsTupleScheme();
			}
		}

		private static class merchant_sotpDecrypt_argsTupleScheme extends TupleScheme<merchant_sotpDecrypt_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSn()) {
					optionals.set(0);
				}
				if (struct.isSetSeed()) {
					optionals.set(1);
				}
				if (struct.isSetCipher()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetSn()) {
					oprot.writeString(struct.sn);
				}
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetCipher()) {
					oprot.writeString(struct.cipher);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpDecrypt_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.sn = iprot.readString();
					struct.setSnIsSet(true);
				}
				if (incoming.get(1)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(2)) {
					struct.cipher = iprot.readString();
					struct.setCipherIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpDecrypt_result
	        implements org.apache.thrift.TBase<merchant_sotpDecrypt_result, merchant_sotpDecrypt_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpDecrypt_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpDecrypt_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new merchant_sotpDecrypt_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpDecrypt_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpDecrypt_result.class,
			        metaDataMap);
		}

		public SotpRet success; // required

		public merchant_sotpDecrypt_result() {
		}

		public merchant_sotpDecrypt_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpDecrypt_result(merchant_sotpDecrypt_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public merchant_sotpDecrypt_result deepCopy() {
			return new merchant_sotpDecrypt_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public merchant_sotpDecrypt_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpDecrypt_result)
				return this.equals((merchant_sotpDecrypt_result) that);
			return false;
		}

		public boolean equals(merchant_sotpDecrypt_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpDecrypt_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpDecrypt_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpDecrypt_resultStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpDecrypt_resultStandardScheme getScheme() {
				return new merchant_sotpDecrypt_resultStandardScheme();
			}
		}

		private static class merchant_sotpDecrypt_resultStandardScheme
		        extends StandardScheme<merchant_sotpDecrypt_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpDecrypt_resultTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpDecrypt_resultTupleScheme getScheme() {
				return new merchant_sotpDecrypt_resultTupleScheme();
			}
		}

		private static class merchant_sotpDecrypt_resultTupleScheme extends TupleScheme<merchant_sotpDecrypt_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpDecrypt_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpVerify_args
	        implements org.apache.thrift.TBase<merchant_sotpVerify_args, merchant_sotpVerify_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpVerify_args> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpVerify_args");
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "type", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "sn", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "time", org.apache.thrift.protocol.TType.I32, (short) 4);
		private static final org.apache.thrift.protocol.TField WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "window", org.apache.thrift.protocol.TType.I32, (short) 5);
		private static final org.apache.thrift.protocol.TField PIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "pin", org.apache.thrift.protocol.TType.STRING, (short) 6);
		private static final org.apache.thrift.protocol.TField CHALLENGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "challenge", org.apache.thrift.protocol.TType.STRING, (short) 7);
		private static final org.apache.thrift.protocol.TField VERIFYCODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "verifycode", org.apache.thrift.protocol.TType.STRING, (short) 8);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __TYPE_ISSET_ID = 0;
		private static final int __TIME_ISSET_ID = 1;
		private static final int __WINDOW_ISSET_ID = 2;

		static {
			schemes.put(StandardScheme.class, new merchant_sotpVerify_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpVerify_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.TYPE,
			        new org.apache.thrift.meta_data.FieldMetaData("type",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TIME,
			        new org.apache.thrift.meta_data.FieldMetaData("time",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.WINDOW,
			        new org.apache.thrift.meta_data.FieldMetaData("window",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.PIN, new org.apache.thrift.meta_data.FieldMetaData("pin",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CHALLENGE, new org.apache.thrift.meta_data.FieldMetaData("challenge",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERIFYCODE, new org.apache.thrift.meta_data.FieldMetaData("verifycode",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpVerify_args.class, metaDataMap);
		}

		public int type; // required
		public String sn; // required
		public String seed; // required
		public int time; // required
		public int window; // required
		public String pin; // required
		public String challenge; // required
		public String verifycode; // required
		private byte __isset_bitfield = 0;

		public merchant_sotpVerify_args() {
		}

		public merchant_sotpVerify_args(int type, String sn, String seed, int time, int window, String pin,
		        String challenge, String verifycode) {
			this();
			this.type = type;
			setTypeIsSet(true);
			this.sn = sn;
			this.seed = seed;
			this.time = time;
			setTimeIsSet(true);
			this.window = window;
			setWindowIsSet(true);
			this.pin = pin;
			this.challenge = challenge;
			this.verifycode = verifycode;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpVerify_args(merchant_sotpVerify_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.type = other.type;
			if (other.isSetSn()) {
				this.sn = other.sn;
			}
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			this.time = other.time;
			this.window = other.window;
			if (other.isSetPin()) {
				this.pin = other.pin;
			}
			if (other.isSetChallenge()) {
				this.challenge = other.challenge;
			}
			if (other.isSetVerifycode()) {
				this.verifycode = other.verifycode;
			}
		}

		public merchant_sotpVerify_args deepCopy() {
			return new merchant_sotpVerify_args(this);
		}

		@Override
		public void clear() {
			setTypeIsSet(false);
			this.type = 0;
			this.sn = null;
			this.seed = null;
			setTimeIsSet(false);
			this.time = 0;
			setWindowIsSet(false);
			this.window = 0;
			this.pin = null;
			this.challenge = null;
			this.verifycode = null;
		}

		public int getType() {
			return this.type;
		}

		public merchant_sotpVerify_args setType(int type) {
			this.type = type;
			setTypeIsSet(true);
			return this;
		}

		public void unsetType() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		public void setTypeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
		}

		public String getSn() {
			return this.sn;
		}

		public merchant_sotpVerify_args setSn(String sn) {
			this.sn = sn;
			return this;
		}

		public void unsetSn() {
			this.sn = null;
		}

		/**
		 * Returns true if field sn is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSn() {
			return this.sn != null;
		}

		public void setSnIsSet(boolean value) {
			if (!value) {
				this.sn = null;
			}
		}

		public String getSeed() {
			return this.seed;
		}

		public merchant_sotpVerify_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public int getTime() {
			return this.time;
		}

		public merchant_sotpVerify_args setTime(int time) {
			this.time = time;
			setTimeIsSet(true);
			return this;
		}

		public void unsetTime() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
		}

		/**
		 * Returns true if field time is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetTime() {
			return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
		}

		public void setTimeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
		}

		public int getWindow() {
			return this.window;
		}

		public merchant_sotpVerify_args setWindow(int window) {
			this.window = window;
			setWindowIsSet(true);
			return this;
		}

		public void unsetWindow() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOW_ISSET_ID);
		}

		/**
		 * Returns true if field window is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetWindow() {
			return EncodingUtils.testBit(__isset_bitfield, __WINDOW_ISSET_ID);
		}

		public void setWindowIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOW_ISSET_ID, value);
		}

		public String getPin() {
			return this.pin;
		}

		public merchant_sotpVerify_args setPin(String pin) {
			this.pin = pin;
			return this;
		}

		public void unsetPin() {
			this.pin = null;
		}

		/**
		 * Returns true if field pin is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPin() {
			return this.pin != null;
		}

		public void setPinIsSet(boolean value) {
			if (!value) {
				this.pin = null;
			}
		}

		public String getChallenge() {
			return this.challenge;
		}

		public merchant_sotpVerify_args setChallenge(String challenge) {
			this.challenge = challenge;
			return this;
		}

		public void unsetChallenge() {
			this.challenge = null;
		}

		/**
		 * Returns true if field challenge is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetChallenge() {
			return this.challenge != null;
		}

		public void setChallengeIsSet(boolean value) {
			if (!value) {
				this.challenge = null;
			}
		}

		public String getVerifycode() {
			return this.verifycode;
		}

		public merchant_sotpVerify_args setVerifycode(String verifycode) {
			this.verifycode = verifycode;
			return this;
		}

		public void unsetVerifycode() {
			this.verifycode = null;
		}

		/**
		 * Returns true if field verifycode is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetVerifycode() {
			return this.verifycode != null;
		}

		public void setVerifycodeIsSet(boolean value) {
			if (!value) {
				this.verifycode = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((Integer) value);
				}
				break;

			case SN:
				if (value == null) {
					unsetSn();
				} else {
					setSn((String) value);
				}
				break;

			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case TIME:
				if (value == null) {
					unsetTime();
				} else {
					setTime((Integer) value);
				}
				break;

			case WINDOW:
				if (value == null) {
					unsetWindow();
				} else {
					setWindow((Integer) value);
				}
				break;

			case PIN:
				if (value == null) {
					unsetPin();
				} else {
					setPin((String) value);
				}
				break;

			case CHALLENGE:
				if (value == null) {
					unsetChallenge();
				} else {
					setChallenge((String) value);
				}
				break;

			case VERIFYCODE:
				if (value == null) {
					unsetVerifycode();
				} else {
					setVerifycode((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TYPE:
				return getType();

			case SN:
				return getSn();

			case SEED:
				return getSeed();

			case TIME:
				return getTime();

			case WINDOW:
				return getWindow();

			case PIN:
				return getPin();

			case CHALLENGE:
				return getChallenge();

			case VERIFYCODE:
				return getVerifycode();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TYPE:
				return isSetType();
			case SN:
				return isSetSn();
			case SEED:
				return isSetSeed();
			case TIME:
				return isSetTime();
			case WINDOW:
				return isSetWindow();
			case PIN:
				return isSetPin();
			case CHALLENGE:
				return isSetChallenge();
			case VERIFYCODE:
				return isSetVerifycode();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpVerify_args)
				return this.equals((merchant_sotpVerify_args) that);
			return false;
		}

		public boolean equals(merchant_sotpVerify_args that) {
			if (that == null)
				return false;

			boolean this_present_type = true;
			boolean that_present_type = true;
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (this.type != that.type)
					return false;
			}

			boolean this_present_sn = true && this.isSetSn();
			boolean that_present_sn = true && that.isSetSn();
			if (this_present_sn || that_present_sn) {
				if (!(this_present_sn && that_present_sn))
					return false;
				if (!this.sn.equals(that.sn))
					return false;
			}

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_time = true;
			boolean that_present_time = true;
			if (this_present_time || that_present_time) {
				if (!(this_present_time && that_present_time))
					return false;
				if (this.time != that.time)
					return false;
			}

			boolean this_present_window = true;
			boolean that_present_window = true;
			if (this_present_window || that_present_window) {
				if (!(this_present_window && that_present_window))
					return false;
				if (this.window != that.window)
					return false;
			}

			boolean this_present_pin = true && this.isSetPin();
			boolean that_present_pin = true && that.isSetPin();
			if (this_present_pin || that_present_pin) {
				if (!(this_present_pin && that_present_pin))
					return false;
				if (!this.pin.equals(that.pin))
					return false;
			}

			boolean this_present_challenge = true && this.isSetChallenge();
			boolean that_present_challenge = true && that.isSetChallenge();
			if (this_present_challenge || that_present_challenge) {
				if (!(this_present_challenge && that_present_challenge))
					return false;
				if (!this.challenge.equals(that.challenge))
					return false;
			}

			boolean this_present_verifycode = true && this.isSetVerifycode();
			boolean that_present_verifycode = true && that.isSetVerifycode();
			if (this_present_verifycode || that_present_verifycode) {
				if (!(this_present_verifycode && that_present_verifycode))
					return false;
				if (!this.verifycode.equals(that.verifycode))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_type = true;
			list.add(present_type);
			if (present_type)
				list.add(type);

			boolean present_sn = true && (isSetSn());
			list.add(present_sn);
			if (present_sn)
				list.add(sn);

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_time = true;
			list.add(present_time);
			if (present_time)
				list.add(time);

			boolean present_window = true;
			list.add(present_window);
			if (present_window)
				list.add(window);

			boolean present_pin = true && (isSetPin());
			list.add(present_pin);
			if (present_pin)
				list.add(pin);

			boolean present_challenge = true && (isSetChallenge());
			list.add(present_challenge);
			if (present_challenge)
				list.add(challenge);

			boolean present_verifycode = true && (isSetVerifycode());
			list.add(present_verifycode);
			if (present_verifycode)
				list.add(verifycode);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpVerify_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSn()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTime()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetWindow()).compareTo(other.isSetWindow());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetWindow()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window, other.window);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPin()).compareTo(other.isSetPin());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPin()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pin, other.pin);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetChallenge()).compareTo(other.isSetChallenge());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetChallenge()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.challenge, other.challenge);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVerifycode()).compareTo(other.isSetVerifycode());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVerifycode()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifycode, other.verifycode);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpVerify_args(");
			boolean first = true;

			sb.append("type:");
			sb.append(this.type);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("sn:");
			if (this.sn == null) {
				sb.append("null");
			} else {
				sb.append(this.sn);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("time:");
			sb.append(this.time);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("window:");
			sb.append(this.window);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pin:");
			if (this.pin == null) {
				sb.append("null");
			} else {
				sb.append(this.pin);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("challenge:");
			if (this.challenge == null) {
				sb.append("null");
			} else {
				sb.append(this.challenge);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("verifycode:");
			if (this.verifycode == null) {
				sb.append("null");
			} else {
				sb.append(this.verifycode);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TYPE((short) 1, "type"), SN((short) 2, "sn"), SEED((short) 3, "seed"), TIME((short) 4,
			        "time"), WINDOW((short) 5, "window"), PIN((short) 6, "pin"), CHALLENGE((short) 7,
			                "challenge"), VERIFYCODE((short) 8, "verifycode");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TYPE
					return TYPE;
				case 2: // SN
					return SN;
				case 3: // SEED
					return SEED;
				case 4: // TIME
					return TIME;
				case 5: // WINDOW
					return WINDOW;
				case 6: // PIN
					return PIN;
				case 7: // CHALLENGE
					return CHALLENGE;
				case 8: // VERIFYCODE
					return VERIFYCODE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpVerify_argsStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpVerify_argsStandardScheme getScheme() {
				return new merchant_sotpVerify_argsStandardScheme();
			}
		}

		private static class merchant_sotpVerify_argsStandardScheme extends StandardScheme<merchant_sotpVerify_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = iprot.readI32();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sn = iprot.readString();
							struct.setSnIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // TIME
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.time = iprot.readI32();
							struct.setTimeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // WINDOW
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.window = iprot.readI32();
							struct.setWindowIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 6: // PIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.pin = iprot.readString();
							struct.setPinIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 7: // CHALLENGE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.challenge = iprot.readString();
							struct.setChallengeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 8: // VERIFYCODE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.verifycode = iprot.readString();
							struct.setVerifycodeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
				if (struct.sn != null) {
					oprot.writeFieldBegin(SN_FIELD_DESC);
					oprot.writeString(struct.sn);
					oprot.writeFieldEnd();
				}
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(TIME_FIELD_DESC);
				oprot.writeI32(struct.time);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(WINDOW_FIELD_DESC);
				oprot.writeI32(struct.window);
				oprot.writeFieldEnd();
				if (struct.pin != null) {
					oprot.writeFieldBegin(PIN_FIELD_DESC);
					oprot.writeString(struct.pin);
					oprot.writeFieldEnd();
				}
				if (struct.challenge != null) {
					oprot.writeFieldBegin(CHALLENGE_FIELD_DESC);
					oprot.writeString(struct.challenge);
					oprot.writeFieldEnd();
				}
				if (struct.verifycode != null) {
					oprot.writeFieldBegin(VERIFYCODE_FIELD_DESC);
					oprot.writeString(struct.verifycode);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpVerify_argsTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpVerify_argsTupleScheme getScheme() {
				return new merchant_sotpVerify_argsTupleScheme();
			}
		}

		private static class merchant_sotpVerify_argsTupleScheme extends TupleScheme<merchant_sotpVerify_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetType()) {
					optionals.set(0);
				}
				if (struct.isSetSn()) {
					optionals.set(1);
				}
				if (struct.isSetSeed()) {
					optionals.set(2);
				}
				if (struct.isSetTime()) {
					optionals.set(3);
				}
				if (struct.isSetWindow()) {
					optionals.set(4);
				}
				if (struct.isSetPin()) {
					optionals.set(5);
				}
				if (struct.isSetChallenge()) {
					optionals.set(6);
				}
				if (struct.isSetVerifycode()) {
					optionals.set(7);
				}
				oprot.writeBitSet(optionals, 8);
				if (struct.isSetType()) {
					oprot.writeI32(struct.type);
				}
				if (struct.isSetSn()) {
					oprot.writeString(struct.sn);
				}
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetTime()) {
					oprot.writeI32(struct.time);
				}
				if (struct.isSetWindow()) {
					oprot.writeI32(struct.window);
				}
				if (struct.isSetPin()) {
					oprot.writeString(struct.pin);
				}
				if (struct.isSetChallenge()) {
					oprot.writeString(struct.challenge);
				}
				if (struct.isSetVerifycode()) {
					oprot.writeString(struct.verifycode);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpVerify_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(8);
				if (incoming.get(0)) {
					struct.type = iprot.readI32();
					struct.setTypeIsSet(true);
				}
				if (incoming.get(1)) {
					struct.sn = iprot.readString();
					struct.setSnIsSet(true);
				}
				if (incoming.get(2)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(3)) {
					struct.time = iprot.readI32();
					struct.setTimeIsSet(true);
				}
				if (incoming.get(4)) {
					struct.window = iprot.readI32();
					struct.setWindowIsSet(true);
				}
				if (incoming.get(5)) {
					struct.pin = iprot.readString();
					struct.setPinIsSet(true);
				}
				if (incoming.get(6)) {
					struct.challenge = iprot.readString();
					struct.setChallengeIsSet(true);
				}
				if (incoming.get(7)) {
					struct.verifycode = iprot.readString();
					struct.setVerifycodeIsSet(true);
				}
			}
		}

	}

	public static class merchant_sotpVerify_result
	        implements org.apache.thrift.TBase<merchant_sotpVerify_result, merchant_sotpVerify_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<merchant_sotpVerify_result> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "merchant_sotpVerify_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.I32, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		static {
			schemes.put(StandardScheme.class, new merchant_sotpVerify_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new merchant_sotpVerify_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchant_sotpVerify_result.class,
			        metaDataMap);
		}

		public int success; // required
		private byte __isset_bitfield = 0;

		public merchant_sotpVerify_result() {
		}

		public merchant_sotpVerify_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public merchant_sotpVerify_result(merchant_sotpVerify_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public merchant_sotpVerify_result deepCopy() {
			return new merchant_sotpVerify_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public merchant_sotpVerify_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof merchant_sotpVerify_result)
				return this.equals((merchant_sotpVerify_result) that);
			return false;
		}

		public boolean equals(merchant_sotpVerify_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(merchant_sotpVerify_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("merchant_sotpVerify_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class merchant_sotpVerify_resultStandardSchemeFactory implements SchemeFactory {
			public merchant_sotpVerify_resultStandardScheme getScheme() {
				return new merchant_sotpVerify_resultStandardScheme();
			}
		}

		private static class merchant_sotpVerify_resultStandardScheme
		        extends StandardScheme<merchant_sotpVerify_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, merchant_sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, merchant_sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class merchant_sotpVerify_resultTupleSchemeFactory implements SchemeFactory {
			public merchant_sotpVerify_resultTupleScheme getScheme() {
				return new merchant_sotpVerify_resultTupleScheme();
			}
		}

		private static class merchant_sotpVerify_resultTupleScheme extends TupleScheme<merchant_sotpVerify_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, merchant_sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, merchant_sotpVerify_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class shareKey_args implements org.apache.thrift.TBase<shareKey_args, shareKey_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<shareKey_args> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "shareKey_args");
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "type", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField SHARE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "shareKey", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __TYPE_ISSET_ID = 0;

		static {
			schemes.put(StandardScheme.class, new shareKey_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new shareKey_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.TYPE,
			        new org.apache.thrift.meta_data.FieldMetaData("type",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.SHARE_KEY, new org.apache.thrift.meta_data.FieldMetaData("shareKey",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shareKey_args.class, metaDataMap);
		}

		public int type; // required
		public String shareKey; // required
		private byte __isset_bitfield = 0;

		public shareKey_args() {
		}

		public shareKey_args(int type, String shareKey) {
			this();
			this.type = type;
			setTypeIsSet(true);
			this.shareKey = shareKey;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public shareKey_args(shareKey_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.type = other.type;
			if (other.isSetShareKey()) {
				this.shareKey = other.shareKey;
			}
		}

		public shareKey_args deepCopy() {
			return new shareKey_args(this);
		}

		@Override
		public void clear() {
			setTypeIsSet(false);
			this.type = 0;
			this.shareKey = null;
		}

		public int getType() {
			return this.type;
		}

		public shareKey_args setType(int type) {
			this.type = type;
			setTypeIsSet(true);
			return this;
		}

		public void unsetType() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		public void setTypeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
		}

		public String getShareKey() {
			return this.shareKey;
		}

		public shareKey_args setShareKey(String shareKey) {
			this.shareKey = shareKey;
			return this;
		}

		public void unsetShareKey() {
			this.shareKey = null;
		}

		/**
		 * Returns true if field shareKey is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetShareKey() {
			return this.shareKey != null;
		}

		public void setShareKeyIsSet(boolean value) {
			if (!value) {
				this.shareKey = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((Integer) value);
				}
				break;

			case SHARE_KEY:
				if (value == null) {
					unsetShareKey();
				} else {
					setShareKey((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TYPE:
				return getType();

			case SHARE_KEY:
				return getShareKey();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TYPE:
				return isSetType();
			case SHARE_KEY:
				return isSetShareKey();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof shareKey_args)
				return this.equals((shareKey_args) that);
			return false;
		}

		public boolean equals(shareKey_args that) {
			if (that == null)
				return false;

			boolean this_present_type = true;
			boolean that_present_type = true;
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (this.type != that.type)
					return false;
			}

			boolean this_present_shareKey = true && this.isSetShareKey();
			boolean that_present_shareKey = true && that.isSetShareKey();
			if (this_present_shareKey || that_present_shareKey) {
				if (!(this_present_shareKey && that_present_shareKey))
					return false;
				if (!this.shareKey.equals(that.shareKey))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_type = true;
			list.add(present_type);
			if (present_type)
				list.add(type);

			boolean present_shareKey = true && (isSetShareKey());
			list.add(present_shareKey);
			if (present_shareKey)
				list.add(shareKey);

			return list.hashCode();
		}

		@Override
		public int compareTo(shareKey_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetShareKey()).compareTo(other.isSetShareKey());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetShareKey()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareKey, other.shareKey);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("shareKey_args(");
			boolean first = true;

			sb.append("type:");
			sb.append(this.type);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("shareKey:");
			if (this.shareKey == null) {
				sb.append("null");
			} else {
				sb.append(this.shareKey);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TYPE((short) 1, "type"), SHARE_KEY((short) 2, "shareKey");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TYPE
					return TYPE;
				case 2: // SHARE_KEY
					return SHARE_KEY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class shareKey_argsStandardSchemeFactory implements SchemeFactory {
			public shareKey_argsStandardScheme getScheme() {
				return new shareKey_argsStandardScheme();
			}
		}

		private static class shareKey_argsStandardScheme extends StandardScheme<shareKey_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, shareKey_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = iprot.readI32();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SHARE_KEY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.shareKey = iprot.readString();
							struct.setShareKeyIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, shareKey_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
				if (struct.shareKey != null) {
					oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
					oprot.writeString(struct.shareKey);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class shareKey_argsTupleSchemeFactory implements SchemeFactory {
			public shareKey_argsTupleScheme getScheme() {
				return new shareKey_argsTupleScheme();
			}
		}

		private static class shareKey_argsTupleScheme extends TupleScheme<shareKey_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, shareKey_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetType()) {
					optionals.set(0);
				}
				if (struct.isSetShareKey()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetType()) {
					oprot.writeI32(struct.type);
				}
				if (struct.isSetShareKey()) {
					oprot.writeString(struct.shareKey);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, shareKey_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.type = iprot.readI32();
					struct.setTypeIsSet(true);
				}
				if (incoming.get(1)) {
					struct.shareKey = iprot.readString();
					struct.setShareKeyIsSet(true);
				}
			}
		}

	}

	public static class shareKey_result implements org.apache.thrift.TBase<shareKey_result, shareKey_result._Fields>,
	        java.io.Serializable, Cloneable, Comparable<shareKey_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "shareKey_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new shareKey_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new shareKey_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shareKey_result.class, metaDataMap);
		}

		public SotpRet success; // required

		public shareKey_result() {
		}

		public shareKey_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public shareKey_result(shareKey_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public shareKey_result deepCopy() {
			return new shareKey_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public shareKey_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof shareKey_result)
				return this.equals((shareKey_result) that);
			return false;
		}

		public boolean equals(shareKey_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(shareKey_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("shareKey_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class shareKey_resultStandardSchemeFactory implements SchemeFactory {
			public shareKey_resultStandardScheme getScheme() {
				return new shareKey_resultStandardScheme();
			}
		}

		private static class shareKey_resultStandardScheme extends StandardScheme<shareKey_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, shareKey_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, shareKey_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class shareKey_resultTupleSchemeFactory implements SchemeFactory {
			public shareKey_resultTupleScheme getScheme() {
				return new shareKey_resultTupleScheme();
			}
		}

		private static class shareKey_resultTupleScheme extends TupleScheme<shareKey_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, shareKey_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, shareKey_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class transEncry_args implements org.apache.thrift.TBase<transEncry_args, transEncry_args._Fields>,
	        java.io.Serializable, Cloneable, Comparable<transEncry_args> {
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "transEncry_args");
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "type", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "seed", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "data", org.apache.thrift.protocol.TType.STRING, (short) 3);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		// isset id assignments
		private static final int __TYPE_ISSET_ID = 0;

		static {
			schemes.put(StandardScheme.class, new transEncry_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new transEncry_argsTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.TYPE,
			        new org.apache.thrift.meta_data.FieldMetaData("type",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data",
			        org.apache.thrift.TFieldRequirementType.DEFAULT,
			        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transEncry_args.class, metaDataMap);
		}

		public int type; // required
		public String seed; // required
		public String data; // required
		private byte __isset_bitfield = 0;

		public transEncry_args() {
		}

		public transEncry_args(int type, String seed, String data) {
			this();
			this.type = type;
			setTypeIsSet(true);
			this.seed = seed;
			this.data = data;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public transEncry_args(transEncry_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.type = other.type;
			if (other.isSetSeed()) {
				this.seed = other.seed;
			}
			if (other.isSetData()) {
				this.data = other.data;
			}
		}

		public transEncry_args deepCopy() {
			return new transEncry_args(this);
		}

		@Override
		public void clear() {
			setTypeIsSet(false);
			this.type = 0;
			this.seed = null;
			this.data = null;
		}

		public int getType() {
			return this.type;
		}

		public transEncry_args setType(int type) {
			this.type = type;
			setTypeIsSet(true);
			return this;
		}

		public void unsetType() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
		}

		public void setTypeIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
		}

		public String getSeed() {
			return this.seed;
		}

		public transEncry_args setSeed(String seed) {
			this.seed = seed;
			return this;
		}

		public void unsetSeed() {
			this.seed = null;
		}

		/**
		 * Returns true if field seed is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSeed() {
			return this.seed != null;
		}

		public void setSeedIsSet(boolean value) {
			if (!value) {
				this.seed = null;
			}
		}

		public String getData() {
			return this.data;
		}

		public transEncry_args setData(String data) {
			this.data = data;
			return this;
		}

		public void unsetData() {
			this.data = null;
		}

		/**
		 * Returns true if field data is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetData() {
			return this.data != null;
		}

		public void setDataIsSet(boolean value) {
			if (!value) {
				this.data = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((Integer) value);
				}
				break;

			case SEED:
				if (value == null) {
					unsetSeed();
				} else {
					setSeed((String) value);
				}
				break;

			case DATA:
				if (value == null) {
					unsetData();
				} else {
					setData((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TYPE:
				return getType();

			case SEED:
				return getSeed();

			case DATA:
				return getData();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TYPE:
				return isSetType();
			case SEED:
				return isSetSeed();
			case DATA:
				return isSetData();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof transEncry_args)
				return this.equals((transEncry_args) that);
			return false;
		}

		public boolean equals(transEncry_args that) {
			if (that == null)
				return false;

			boolean this_present_type = true;
			boolean that_present_type = true;
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (this.type != that.type)
					return false;
			}

			boolean this_present_seed = true && this.isSetSeed();
			boolean that_present_seed = true && that.isSetSeed();
			if (this_present_seed || that_present_seed) {
				if (!(this_present_seed && that_present_seed))
					return false;
				if (!this.seed.equals(that.seed))
					return false;
			}

			boolean this_present_data = true && this.isSetData();
			boolean that_present_data = true && that.isSetData();
			if (this_present_data || that_present_data) {
				if (!(this_present_data && that_present_data))
					return false;
				if (!this.data.equals(that.data))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_type = true;
			list.add(present_type);
			if (present_type)
				list.add(type);

			boolean present_seed = true && (isSetSeed());
			list.add(present_seed);
			if (present_seed)
				list.add(seed);

			boolean present_data = true && (isSetData());
			list.add(present_data);
			if (present_data)
				list.add(data);

			return list.hashCode();
		}

		@Override
		public int compareTo(transEncry_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSeed()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetData()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("transEncry_args(");
			boolean first = true;

			sb.append("type:");
			sb.append(this.type);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("seed:");
			if (this.seed == null) {
				sb.append("null");
			} else {
				sb.append(this.seed);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("data:");
			if (this.data == null) {
				sb.append("null");
			} else {
				sb.append(this.data);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TYPE((short) 1, "type"), SEED((short) 2, "seed"), DATA((short) 3, "data");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TYPE
					return TYPE;
				case 2: // SEED
					return SEED;
				case 3: // DATA
					return DATA;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class transEncry_argsStandardSchemeFactory implements SchemeFactory {
			public transEncry_argsStandardScheme getScheme() {
				return new transEncry_argsStandardScheme();
			}
		}

		private static class transEncry_argsStandardScheme extends StandardScheme<transEncry_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, transEncry_args struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = iprot.readI32();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SEED
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.seed = iprot.readString();
							struct.setSeedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // DATA
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.data = iprot.readString();
							struct.setDataIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, transEncry_args struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeI32(struct.type);
				oprot.writeFieldEnd();
				if (struct.seed != null) {
					oprot.writeFieldBegin(SEED_FIELD_DESC);
					oprot.writeString(struct.seed);
					oprot.writeFieldEnd();
				}
				if (struct.data != null) {
					oprot.writeFieldBegin(DATA_FIELD_DESC);
					oprot.writeString(struct.data);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class transEncry_argsTupleSchemeFactory implements SchemeFactory {
			public transEncry_argsTupleScheme getScheme() {
				return new transEncry_argsTupleScheme();
			}
		}

		private static class transEncry_argsTupleScheme extends TupleScheme<transEncry_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, transEncry_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetType()) {
					optionals.set(0);
				}
				if (struct.isSetSeed()) {
					optionals.set(1);
				}
				if (struct.isSetData()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetType()) {
					oprot.writeI32(struct.type);
				}
				if (struct.isSetSeed()) {
					oprot.writeString(struct.seed);
				}
				if (struct.isSetData()) {
					oprot.writeString(struct.data);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, transEncry_args struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.type = iprot.readI32();
					struct.setTypeIsSet(true);
				}
				if (incoming.get(1)) {
					struct.seed = iprot.readString();
					struct.setSeedIsSet(true);
				}
				if (incoming.get(2)) {
					struct.data = iprot.readString();
					struct.setDataIsSet(true);
				}
			}
		}

	}

	public static class transEncry_result
	        implements org.apache.thrift.TBase<transEncry_result, transEncry_result._Fields>, java.io.Serializable,
	        Cloneable, Comparable<transEncry_result> {
		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
		        "transEncry_result");
		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
		        "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

		static {
			schemes.put(StandardScheme.class, new transEncry_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new transEncry_resultTupleSchemeFactory());
		}

		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
			        _Fields.class);
			tmpMap.put(_Fields.SUCCESS,
			        new org.apache.thrift.meta_data.FieldMetaData("success",
			                org.apache.thrift.TFieldRequirementType.DEFAULT,
			                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
			                        SotpRet.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transEncry_result.class, metaDataMap);
		}

		public SotpRet success; // required

		public transEncry_result() {
		}

		public transEncry_result(SotpRet success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public transEncry_result(transEncry_result other) {
			if (other.isSetSuccess()) {
				this.success = new SotpRet(other.success);
			}
		}

		public transEncry_result deepCopy() {
			return new transEncry_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public SotpRet getSuccess() {
			return this.success;
		}

		public transEncry_result setSuccess(SotpRet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((SotpRet) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof transEncry_result)
				return this.equals((transEncry_result) that);
			return false;
		}

		public boolean equals(transEncry_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(transEncry_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("transEncry_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
				        new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		private static class transEncry_resultStandardSchemeFactory implements SchemeFactory {
			public transEncry_resultStandardScheme getScheme() {
				return new transEncry_resultStandardScheme();
			}
		}

		private static class transEncry_resultStandardScheme extends StandardScheme<transEncry_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, transEncry_result struct)
			        throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new SotpRet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, transEncry_result struct)
			        throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class transEncry_resultTupleSchemeFactory implements SchemeFactory {
			public transEncry_resultTupleScheme getScheme() {
				return new transEncry_resultTupleScheme();
			}
		}

		private static class transEncry_resultTupleScheme extends TupleScheme<transEncry_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, transEncry_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, transEncry_result struct)
			        throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new SotpRet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
